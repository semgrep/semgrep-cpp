(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_cpp"

let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "semgrep_metavar", None;
  "virtual",
  Some (
    Alt [|
      Token (Literal "virtual");
    |];
  );
  "gnu_asm_qualifier",
  Some (
    Alt [|
      Token (Literal "volatile");
      Token (Literal "inline");
      Token (Literal "goto");
    |];
  );
  "imm_tok_pat_509ec78", None;
  "pat_ca8830e", None;
  "escape_sequence", None;
  "this", None;
  "pat_56631e5", None;
  "imm_tok_prec_p1_pat_c7f65b4", None;
  "default_method_clause",
  Some (
    Seq [
      Token (Literal "=");
      Token (Literal "default");
      Token (Literal ";");
    ];
  );
  "comment", None;
  "pat_25b90ba", None;
  "semgrep_ellipsis", None;
  "access_specifier",
  Some (
    Alt [|
      Token (Literal "public");
      Token (Literal "private");
      Token (Literal "protected");
    |];
  );
  "semgrep_named_ellipsis", None;
  "seh_leave_statement",
  Some (
    Seq [
      Token (Literal "__leave");
      Token (Literal ";");
    ];
  );
  "auto", None;
  "false", None;
  "ref_qualifier",
  Some (
    Alt [|
      Token (Literal "&");
      Token (Literal "&&");
    |];
  );
  "pat_9d92f6a", None;
  "preproc_directive", None;
  "storage_class_specifier",
  Some (
    Alt [|
      Token (Literal "extern");
      Token (Literal "static");
      Token (Literal "register");
      Token (Literal "inline");
      Token (Literal "__inline");
      Token (Literal "__inline__");
      Token (Literal "__forceinline");
      Token (Literal "thread_local");
      Token (Literal "__thread");
    |];
  );
  "type_qualifier",
  Some (
    Alt [|
      Alt [|
        Token (Literal "const");
        Token (Literal "constexpr");
        Token (Literal "volatile");
        Token (Literal "restrict");
        Token (Literal "__restrict__");
        Token (Literal "__extension__");
        Token (Literal "_Atomic");
        Token (Literal "_Noreturn");
        Token (Literal "noreturn");
      |];
      Token (Literal "mutable");
      Token (Literal "constinit");
      Token (Literal "consteval");
    |];
  );
  "virtual_specifier",
  Some (
    Alt [|
      Token (Literal "final");
      Token (Literal "override");
    |];
  );
  "delete_method_clause",
  Some (
    Seq [
      Token (Literal "=");
      Token (Literal "delete");
      Token (Literal ";");
    ];
  );
  "preproc_arg", None;
  "lambda_default_capture",
  Some (
    Alt [|
      Token (Literal "=");
      Token (Literal "&");
    |];
  );
  "tok_prec_p1_gt", None;
  "ms_unaligned_ptr_modifier",
  Some (
    Alt [|
      Token (Literal "_unaligned");
      Token (Literal "__unaligned");
    |];
  );
  "pat_3df6e71", None;
  "pat_c3ea183", None;
  "pat_bfeb4bb", None;
  "break_statement",
  Some (
    Seq [
      Token (Literal "break");
      Token (Literal ";");
    ];
  );
  "identifier", None;
  "ms_restrict_modifier", None;
  "pat_c46d1b2", None;
  "pat_a6d4183", None;
  "raw_string_delimiter", None;
  "number_literal", None;
  "imm_tok_lpar", None;
  "pat_0307ca2", None;
  "null",
  Some (
    Alt [|
      Token (Literal "NULL");
      Token (Literal "nullptr");
    |];
  );
  "raw_string_content", None;
  "primitive_type", None;
  "literal_suffix", None;
  "ms_unsigned_ptr_modifier", None;
  "true", None;
  "continue_statement",
  Some (
    Seq [
      Token (Literal "continue");
      Token (Literal ";");
    ];
  );
  "ms_signed_ptr_modifier", None;
  "system_lib_string", None;
  "ms_call_modifier",
  Some (
    Alt [|
      Token (Literal "__cdecl");
      Token (Literal "__clrcall");
      Token (Literal "__stdcall");
      Token (Literal "__fastcall");
      Token (Literal "__thiscall");
      Token (Literal "__vectorcall");
    |];
  );
  "imm_tok_pat_36637e2", None;
  "fold_operator",
  Some (
    Alt [|
      Token (Literal "+");
      Token (Literal "-");
      Token (Literal "*");
      Token (Literal "/");
      Token (Literal "%");
      Token (Literal "^");
      Token (Literal "&");
      Token (Literal "|");
      Token (Literal "=");
      Token (Literal "<");
      Token (Literal ">");
      Token (Literal "<<");
      Token (Literal ">>");
      Token (Literal "+=");
      Token (Literal "-=");
      Token (Literal "*=");
      Token (Literal "/=");
      Token (Literal "%=");
      Token (Literal "^=");
      Token (Literal "&=");
      Token (Literal "|=");
      Token (Literal ">>=");
      Token (Literal "<<=");
      Token (Literal "==");
      Token (Literal "!=");
      Token (Literal "<=");
      Token (Literal ">=");
      Token (Literal "&&");
      Token (Literal "||");
      Token (Literal ",");
      Token (Literal ".*");
      Token (Literal "->*");
      Token (Literal "or");
      Token (Literal "and");
      Token (Literal "bitor");
      Token (Literal "xor");
      Token (Literal "bitand");
      Token (Literal "not_eq");
    |];
  );
  "string_literal",
  Some (
    Seq [
      Alt [|
        Token (Literal "L\"");
        Token (Literal "u\"");
        Token (Literal "U\"");
        Token (Literal "u8\"");
        Token (Literal "\"");
      |];
      Repeat (
        Alt [|
          Token (Name "imm_tok_prec_p1_pat_c7f65b4");
          Token (Name "escape_sequence");
        |];
      );
      Token (Literal "\"");
    ];
  );
  "decltype_auto",
  Some (
    Seq [
      Token (Literal "decltype");
      Token (Literal "(");
      Token (Name "auto");
      Token (Literal ")");
    ];
  );
  "preproc_call",
  Some (
    Seq [
      Token (Name "preproc_directive");
      Opt (
        Token (Name "preproc_arg");
      );
      Token (Name "imm_tok_pat_509ec78");
    ];
  );
  "field_designator",
  Some (
    Seq [
      Token (Literal ".");
      Alt [|
        Token (Name "identifier");
        Token (Name "semgrep_ellipsis");
      |];
    ];
  );
  "operator_name",
  Some (
    Seq [
      Token (Literal "operator");
      Alt [|
        Token (Literal "co_await");
        Token (Literal "+");
        Token (Literal "-");
        Token (Literal "*");
        Token (Literal "/");
        Token (Literal "%");
        Token (Literal "^");
        Token (Literal "&");
        Token (Literal "|");
        Token (Literal "~");
        Token (Literal "!");
        Token (Literal "=");
        Token (Literal "<");
        Token (Literal ">");
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "^=");
        Token (Literal "&=");
        Token (Literal "|=");
        Token (Literal "<<");
        Token (Literal ">>");
        Token (Literal ">>=");
        Token (Literal "<<=");
        Token (Literal "==");
        Token (Literal "!=");
        Token (Literal "<=");
        Token (Literal ">=");
        Token (Literal "<=>");
        Token (Literal "&&");
        Token (Literal "||");
        Token (Literal "++");
        Token (Literal "--");
        Token (Literal ",");
        Token (Literal "->*");
        Token (Literal "->");
        Token (Literal "()");
        Token (Literal "[]");
        Token (Literal "xor");
        Token (Literal "bitand");
        Token (Literal "bitor");
        Token (Literal "compl");
        Token (Literal "not");
        Token (Literal "xor_eq");
        Token (Literal "and_eq");
        Token (Literal "or_eq");
        Token (Literal "not_eq");
        Token (Literal "and");
        Token (Literal "or");
        Seq [
          Alt [|
            Token (Literal "new");
            Token (Literal "delete");
          |];
          Opt (
            Token (Literal "[]");
          );
        ];
        Seq [
          Token (Literal "\"\"");
          Token (Name "identifier");
        ];
      |];
    ];
  );
  "variadic_type_parameter_declaration",
  Some (
    Seq [
      Alt [|
        Token (Literal "typename");
        Token (Literal "class");
      |];
      Token (Literal "...");
      Opt (
        Token (Name "identifier");
      );
    ];
  );
  "destructor_name",
  Some (
    Seq [
      Token (Literal "~");
      Token (Name "identifier");
    ];
  );
  "ms_declspec_modifier",
  Some (
    Seq [
      Token (Literal "__declspec");
      Token (Literal "(");
      Token (Name "identifier");
      Token (Literal ")");
    ];
  );
  "variadic_declarator",
  Some (
    Seq [
      Token (Literal "...");
      Opt (
        Token (Name "identifier");
      );
    ];
  );
  "goto_statement",
  Some (
    Seq [
      Token (Literal "goto");
      Token (Name "identifier");
      Token (Literal ";");
    ];
  );
  "preproc_defined",
  Some (
    Alt [|
      Seq [
        Token (Literal "defined");
        Token (Literal "(");
        Token (Name "identifier");
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "defined");
        Token (Name "identifier");
      ];
    |];
  );
  "structured_binding_declarator",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "identifier");
        ];
      );
      Token (Literal "]");
    ];
  );
  "gnu_asm_goto_list",
  Some (
    Seq [
      Token (Literal ":");
      Opt (
        Seq [
          Token (Name "identifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "identifier");
            ];
          );
        ];
      );
    ];
  );
  "namespace_specifier",
  Some (
    Seq [
      Opt (
        Token (Literal "inline");
      );
      Token (Name "identifier");
    ];
  );
  "type_parameter_declaration",
  Some (
    Seq [
      Alt [|
        Token (Literal "typename");
        Token (Literal "class");
      |];
      Opt (
        Token (Name "identifier");
      );
    ];
  );
  "preproc_def",
  Some (
    Seq [
      Token (Name "pat_c3ea183");
      Token (Name "identifier");
      Opt (
        Token (Name "preproc_arg");
      );
      Token (Name "imm_tok_pat_509ec78");
    ];
  );
  "preproc_params",
  Some (
    Seq [
      Token (Name "imm_tok_lpar");
      Opt (
        Seq [
          Alt [|
            Token (Name "identifier");
            Token (Literal "...");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "identifier");
                Token (Literal "...");
              |];
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "raw_string_literal",
  Some (
    Seq [
      Alt [|
        Token (Literal "R\"");
        Token (Literal "LR\"");
        Token (Literal "uR\"");
        Token (Literal "UR\"");
        Token (Literal "u8R\"");
      |];
      Alt [|
        Seq [
          Token (Name "raw_string_delimiter");
          Token (Literal "(");
          Token (Name "raw_string_content");
          Token (Literal ")");
          Token (Name "raw_string_delimiter");
        ];
        Seq [
          Token (Literal "(");
          Token (Name "raw_string_content");
          Token (Literal ")");
        ];
      |];
      Token (Literal "\"");
    ];
  );
  "sized_type_specifier",
  Some (
    Alt [|
      Seq [
        Repeat (
          Alt [|
            Token (Literal "signed");
            Token (Literal "unsigned");
            Token (Literal "long");
            Token (Literal "short");
          |];
        );
        Opt (
          Alt [|
            Token (Name "identifier");
            Token (Name "primitive_type");
          |];
        );
        Repeat1 (
          Alt [|
            Token (Literal "signed");
            Token (Literal "unsigned");
            Token (Literal "long");
            Token (Literal "short");
          |];
        );
      ];
      Seq [
        Repeat1 (
          Alt [|
            Token (Literal "signed");
            Token (Literal "unsigned");
            Token (Literal "long");
            Token (Literal "short");
          |];
        );
        Opt (
          Alt [|
            Token (Name "identifier");
            Token (Name "primitive_type");
          |];
        );
        Repeat (
          Alt [|
            Token (Literal "signed");
            Token (Literal "unsigned");
            Token (Literal "long");
            Token (Literal "short");
          |];
        );
      ];
    |];
  );
  "ms_pointer_modifier",
  Some (
    Alt [|
      Token (Name "ms_unaligned_ptr_modifier");
      Token (Name "ms_restrict_modifier");
      Token (Name "ms_unsigned_ptr_modifier");
      Token (Name "ms_signed_ptr_modifier");
    |];
  );
  "char_literal",
  Some (
    Seq [
      Alt [|
        Token (Literal "L'");
        Token (Literal "u'");
        Token (Literal "U'");
        Token (Literal "u8'");
        Token (Literal "'");
      |];
      Repeat1 (
        Alt [|
          Token (Name "escape_sequence");
          Token (Name "imm_tok_pat_36637e2");
        |];
      );
      Token (Literal "'");
    ];
  );
  "binary_fold_operator",
  Some (
    Seq [
      Token (Name "fold_operator");
      Token (Literal "...");
      Token (Name "fold_operator");
    ];
  );
  "gnu_asm_output_operand",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Literal "[");
          Token (Name "identifier");
          Token (Literal "]");
        ];
      );
      Token (Name "string_literal");
      Token (Literal "(");
      Token (Name "identifier");
      Token (Literal ")");
    ];
  );
  "gnu_asm_clobber_list",
  Some (
    Seq [
      Token (Literal ":");
      Opt (
        Seq [
          Token (Name "string_literal");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "string_literal");
            ];
          );
        ];
      );
    ];
  );
  "variadic_reference_declarator",
  Some (
    Seq [
      Alt [|
        Token (Literal "&&");
        Token (Literal "&");
      |];
      Token (Name "variadic_declarator");
    ];
  );
  "nested_namespace_specifier",
  Some (
    Seq [
      Opt (
        Token (Name "namespace_specifier");
      );
      Token (Literal "::");
      Alt [|
        Token (Name "nested_namespace_specifier");
        Token (Name "namespace_specifier");
      |];
    ];
  );
  "preproc_function_def",
  Some (
    Seq [
      Token (Name "pat_c3ea183");
      Token (Name "identifier");
      Token (Name "preproc_params");
      Opt (
        Token (Name "preproc_arg");
      );
      Token (Name "imm_tok_pat_509ec78");
    ];
  );
  "concatenated_string",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "string_literal");
        Token (Name "raw_string_literal");
      |];
      Alt [|
        Token (Name "string_literal");
        Token (Name "raw_string_literal");
      |];
      Repeat (
        Alt [|
          Token (Name "identifier");
          Token (Name "string_literal");
          Token (Name "raw_string_literal");
        |];
      );
    ];
  );
  "preproc_argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "preproc_expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "preproc_expression");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "preproc_binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "+");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "-");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "*");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "/");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "%");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "||");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "&&");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "|");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "^");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "&");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "==");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "!=");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal ">");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal ">=");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "<=");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "<");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal "<<");
        Token (Name "preproc_expression");
      ];
      Seq [
        Token (Name "preproc_expression");
        Token (Literal ">>");
        Token (Name "preproc_expression");
      ];
    |];
  );
  "preproc_call_expression",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "preproc_argument_list");
    ];
  );
  "preproc_expression",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "preproc_call_expression");
      Token (Name "number_literal");
      Token (Name "char_literal");
      Token (Name "preproc_defined");
      Token (Name "preproc_unary_expression");
      Token (Name "preproc_binary_expression");
      Token (Name "preproc_parenthesized_expression");
    |];
  );
  "preproc_parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "preproc_expression");
      Token (Literal ")");
    ];
  );
  "preproc_unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "!");
        Token (Literal "~");
        Token (Literal "-");
        Token (Literal "+");
      |];
      Token (Name "preproc_expression");
    ];
  );
  "gnu_asm_output_operand_list",
  Some (
    Seq [
      Token (Literal ":");
      Opt (
        Seq [
          Token (Name "gnu_asm_output_operand");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "gnu_asm_output_operand");
            ];
          );
        ];
      );
    ];
  );
  "namespace_alias_definition",
  Some (
    Seq [
      Token (Literal "namespace");
      Token (Name "identifier");
      Token (Literal "=");
      Alt [|
        Token (Name "identifier");
        Token (Name "nested_namespace_specifier");
      |];
      Token (Literal ";");
    ];
  );
  "user_defined_literal",
  Some (
    Seq [
      Alt [|
        Token (Name "number_literal");
        Token (Name "char_literal");
        Token (Name "string_literal");
        Token (Name "raw_string_literal");
        Token (Name "concatenated_string");
      |];
      Token (Name "literal_suffix");
    ];
  );
  "preproc_include",
  Some (
    Seq [
      Token (Name "pat_ca8830e");
      Alt [|
        Token (Name "string_literal");
        Token (Name "system_lib_string");
        Token (Name "identifier");
        Token (Name "preproc_call_expression");
      |];
      Token (Name "imm_tok_pat_509ec78");
    ];
  );
  "abstract_array_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "abstract_declarator");
      );
      Token (Literal "[");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Literal "*");
        |];
      );
      Token (Literal "]");
    ];
  );
  "abstract_declarator",
  Some (
    Alt [|
      Alt [|
        Token (Name "abstract_pointer_declarator");
        Token (Name "abstract_function_declarator");
        Token (Name "abstract_array_declarator");
        Token (Name "abstract_parenthesized_declarator");
      |];
      Token (Name "abstract_reference_declarator");
    |];
  );
  "abstract_function_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "abstract_declarator");
      );
      Token (Name "function_declarator_seq");
    ];
  );
  "abstract_parenthesized_declarator",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "abstract_declarator");
      Token (Literal ")");
    ];
  );
  "abstract_pointer_declarator",
  Some (
    Seq [
      Token (Literal "*");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Token (Name "abstract_declarator");
      );
    ];
  );
  "abstract_reference_declarator",
  Some (
    Seq [
      Alt [|
        Token (Literal "&");
        Token (Literal "&&");
      |];
      Opt (
        Token (Name "abstract_declarator");
      );
    ];
  );
  "alias_declaration",
  Some (
    Seq [
      Token (Literal "using");
      Token (Name "identifier");
      Repeat (
        Token (Name "attribute_declaration");
      );
      Token (Literal "=");
      Token (Name "type_descriptor");
      Token (Literal ";");
    ];
  );
  "alignas_specifier",
  Some (
    Seq [
      Token (Literal "alignas");
      Token (Literal "(");
      Alt [|
        Token (Name "expression");
        Token (Name "primitive_type");
      |];
      Token (Literal ")");
    ];
  );
  "alignof_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "__alignof__");
        Token (Literal "__alignof");
        Token (Literal "_alignof");
        Token (Literal "alignof");
        Token (Literal "_Alignof");
      |];
      Token (Literal "(");
      Token (Name "type_descriptor");
      Token (Literal ")");
    ];
  );
  "argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Seq [
              Opt (
                Token (Literal "__extension__");
              );
              Token (Name "expression");
            ];
            Token (Name "initializer_list");
            Token (Name "compound_statement");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Seq [
                  Opt (
                    Token (Literal "__extension__");
                  );
                  Token (Name "expression");
                ];
                Token (Name "initializer_list");
                Token (Name "compound_statement");
              |];
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "array_declarator",
  Some (
    Seq [
      Token (Name "declarator");
      Token (Literal "[");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Literal "*");
        |];
      );
      Token (Literal "]");
    ];
  );
  "array_field_declarator",
  Some (
    Seq [
      Token (Name "field_declarator");
      Token (Literal "[");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Literal "*");
        |];
      );
      Token (Literal "]");
    ];
  );
  "array_type_declarator",
  Some (
    Seq [
      Token (Name "type_declarator");
      Token (Literal "[");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Literal "*");
        |];
      );
      Token (Literal "]");
    ];
  );
  "assignment_expression",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "identifier");
          Token (Name "call_expression");
          Token (Name "field_expression");
          Token (Name "pointer_expression");
          Token (Name "subscript_expression");
          Token (Name "parenthesized_expression");
        |];
        Token (Name "qualified_identifier");
        Token (Name "user_defined_literal");
      |];
      Alt [|
        Token (Literal "=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "<<=");
        Token (Literal ">>=");
        Token (Literal "&=");
        Token (Literal "^=");
        Token (Literal "|=");
        Token (Literal "and_eq");
        Token (Literal "or_eq");
        Token (Literal "xor_eq");
      |];
      Alt [|
        Token (Name "expression");
        Token (Name "initializer_list");
      |];
    ];
  );
  "assignment_expression_lhs_expression",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Literal "=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "<<=");
        Token (Literal ">>=");
        Token (Literal "&=");
        Token (Literal "^=");
        Token (Literal "|=");
        Token (Literal "and_eq");
        Token (Literal "or_eq");
        Token (Literal "xor_eq");
      |];
      Alt [|
        Token (Name "expression");
        Token (Name "initializer_list");
      |];
    ];
  );
  "attribute",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "identifier");
          Token (Literal "::");
        ];
      );
      Token (Name "identifier");
      Opt (
        Token (Name "argument_list");
      );
    ];
  );
  "attribute_declaration",
  Some (
    Seq [
      Token (Literal "[[");
      Token (Name "attribute");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "attribute");
        ];
      );
      Token (Literal "]]");
    ];
  );
  "attribute_specifier",
  Some (
    Seq [
      Token (Literal "__attribute__");
      Token (Literal "(");
      Token (Name "argument_list");
      Token (Literal ")");
    ];
  );
  "attributed_declarator",
  Some (
    Seq [
      Token (Name "declarator");
      Repeat1 (
        Token (Name "attribute_declaration");
      );
    ];
  );
  "attributed_field_declarator",
  Some (
    Seq [
      Token (Name "field_declarator");
      Repeat1 (
        Token (Name "attribute_declaration");
      );
    ];
  );
  "attributed_statement",
  Some (
    Seq [
      Repeat1 (
        Token (Name "attribute_declaration");
      );
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Alt [|
            Token (Name "attributed_statement");
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
            Token (Name "seh_try_statement");
            Token (Name "seh_leave_statement");
          |];
          Token (Name "co_return_statement");
          Token (Name "co_yield_statement");
          Token (Name "for_range_loop");
          Token (Name "try_statement");
          Token (Name "throw_statement");
        |];
      |];
    ];
  );
  "attributed_type_declarator",
  Some (
    Seq [
      Token (Name "type_declarator");
      Repeat1 (
        Token (Name "attribute_declaration");
      );
    ];
  );
  "base_class_clause",
  Some (
    Seq [
      Token (Literal ":");
      Repeat (
        Token (Name "attribute_declaration");
      );
      Opt (
        Alt [|
          Token (Name "access_specifier");
          Seq [
            Token (Name "access_specifier");
            Token (Name "virtual");
          ];
          Seq [
            Token (Name "virtual");
            Token (Name "access_specifier");
          ];
        |];
      );
      Token (Name "class_name");
      Opt (
        Token (Literal "...");
      );
      Repeat (
        Seq [
          Token (Literal ",");
          Repeat (
            Token (Name "attribute_declaration");
          );
          Opt (
            Alt [|
              Token (Name "access_specifier");
              Seq [
                Token (Name "access_specifier");
                Token (Name "virtual");
              ];
              Seq [
                Token (Name "virtual");
                Token (Name "access_specifier");
              ];
            |];
          );
          Token (Name "class_name");
          Opt (
            Token (Literal "...");
          );
        ];
      );
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "or");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "and");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "bitor");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "xor");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "bitand");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "not_eq");
        Token (Name "expression");
      ];
    |];
  );
  "binary_fold",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "binary_fold_operator");
      Token (Name "expression");
    ];
  );
  "bitfield_clause",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "call_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Name "argument_list");
      ];
      Seq [
        Token (Name "primitive_type");
        Token (Name "argument_list");
      ];
    |];
  );
  "case_statement",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "case");
          Token (Name "expression");
        ];
        Token (Literal "default");
      |];
      Token (Literal ":");
      Repeat (
        Alt [|
          Alt [|
            Alt [|
              Token (Name "attributed_statement");
              Token (Name "labeled_statement");
              Token (Name "compound_statement");
              Token (Name "expression_statement");
              Token (Name "if_statement");
              Token (Name "switch_statement");
              Token (Name "do_statement");
              Token (Name "while_statement");
              Token (Name "for_statement");
              Token (Name "return_statement");
              Token (Name "break_statement");
              Token (Name "continue_statement");
              Token (Name "goto_statement");
              Token (Name "seh_try_statement");
              Token (Name "seh_leave_statement");
            |];
            Token (Name "co_return_statement");
            Token (Name "co_yield_statement");
            Token (Name "for_range_loop");
            Token (Name "try_statement");
            Token (Name "throw_statement");
          |];
          Token (Name "declaration");
          Token (Name "type_definition");
        |];
      );
    ];
  );
  "cast_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type_descriptor");
      Token (Literal ")");
      Token (Name "expression");
    ];
  );
  "catch_clause",
  Some (
    Seq [
      Token (Literal "catch");
      Token (Name "parameter_list");
      Token (Name "compound_statement");
    ];
  );
  "class_declaration",
  Some (
    Seq [
      Repeat (
        Alt [|
          Token (Name "attribute_specifier");
          Token (Name "alignas_specifier");
        |];
      );
      Opt (
        Token (Name "ms_declspec_modifier");
      );
      Repeat (
        Token (Name "attribute_declaration");
      );
      Token (Name "class_declaration_item");
    ];
  );
  "class_declaration_item",
  Some (
    Seq [
      Alt [|
        Token (Name "class_name");
        Seq [
          Opt (
            Token (Name "class_name");
          );
          Opt (
            Token (Name "virtual_specifier");
          );
          Opt (
            Token (Name "base_class_clause");
          );
          Token (Name "field_declaration_list");
        ];
      |];
      Opt (
        Token (Name "attribute_specifier");
      );
    ];
  );
  "class_name",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "template_type");
      Token (Name "qualified_type_identifier");
    |];
  );
  "class_specifier",
  Some (
    Seq [
      Token (Literal "class");
      Token (Name "class_declaration");
    ];
  );
  "co_await_expression",
  Some (
    Seq [
      Token (Literal "co_await");
      Token (Name "expression");
    ];
  );
  "co_return_statement",
  Some (
    Seq [
      Token (Literal "co_return");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
    ];
  );
  "co_yield_statement",
  Some (
    Seq [
      Token (Literal "co_yield");
      Token (Name "expression");
      Token (Literal ";");
    ];
  );
  "comma_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ",");
      Alt [|
        Token (Name "expression");
        Token (Name "comma_expression");
      |];
    ];
  );
  "compound_literal_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Token (Name "type_descriptor");
        Token (Literal ")");
        Token (Name "initializer_list");
      ];
      Seq [
        Alt [|
          Token (Name "class_name");
          Token (Name "primitive_type");
        |];
        Token (Name "initializer_list");
      ];
    |];
  );
  "compound_requirement",
  Some (
    Seq [
      Token (Literal "{");
      Token (Name "expression");
      Token (Literal "}");
      Opt (
        Token (Literal "noexcept");
      );
      Opt (
        Token (Name "trailing_return_type");
      );
      Token (Literal ";");
    ];
  );
  "compound_statement",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_definition");
            Token (Name "linkage_specification");
            Token (Name "declaration");
            Alt [|
              Token (Name "case_statement");
              Alt [|
                Alt [|
                  Token (Name "attributed_statement");
                  Token (Name "labeled_statement");
                  Token (Name "compound_statement");
                  Token (Name "expression_statement");
                  Token (Name "if_statement");
                  Token (Name "switch_statement");
                  Token (Name "do_statement");
                  Token (Name "while_statement");
                  Token (Name "for_statement");
                  Token (Name "return_statement");
                  Token (Name "break_statement");
                  Token (Name "continue_statement");
                  Token (Name "goto_statement");
                  Token (Name "seh_try_statement");
                  Token (Name "seh_leave_statement");
                |];
                Token (Name "co_return_statement");
                Token (Name "co_yield_statement");
                Token (Name "for_range_loop");
                Token (Name "try_statement");
                Token (Name "throw_statement");
              |];
            |];
            Token (Name "attributed_statement");
            Token (Name "type_definition");
            Token (Name "empty_declaration");
            Token (Name "preproc_if");
            Token (Name "preproc_ifdef");
            Token (Name "preproc_include");
            Token (Name "preproc_def");
            Token (Name "preproc_function_def");
            Token (Name "preproc_call");
            Token (Name "namespace_definition");
            Token (Name "concept_definition");
            Token (Name "namespace_alias_definition");
            Token (Name "using_declaration");
            Token (Name "alias_declaration");
            Token (Name "static_assert_declaration");
            Token (Name "template_declaration");
            Token (Name "template_instantiation");
            Token (Name "constructor_or_destructor_definition");
            Token (Name "operator_cast_definition");
            Token (Name "operator_cast_declaration");
          |];
          Token (Name "semgrep_ellipsis");
        |];
      );
      Token (Literal "}");
    ];
  );
  "concept_definition",
  Some (
    Seq [
      Token (Literal "concept");
      Token (Name "identifier");
      Token (Literal "=");
      Token (Name "expression");
      Token (Literal ";");
    ];
  );
  "condition_clause",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Name "init_statement");
      );
      Alt [|
        Token (Name "expression");
        Token (Name "comma_expression");
        Token (Name "condition_declaration");
      |];
      Token (Literal ")");
    ];
  );
  "condition_declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Token (Name "declarator");
      Alt [|
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
        Token (Name "initializer_list");
      |];
    ];
  );
  "conditional_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "?");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "constraint_conjunction",
  Some (
    Seq [
      Token (Name "requirement_clause_constraint");
      Alt [|
        Token (Literal "&&");
        Token (Literal "and");
      |];
      Token (Name "requirement_clause_constraint");
    ];
  );
  "constraint_disjunction",
  Some (
    Seq [
      Token (Name "requirement_clause_constraint");
      Alt [|
        Token (Literal "||");
        Token (Literal "or");
      |];
      Token (Name "requirement_clause_constraint");
    ];
  );
  "constructor_or_destructor_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "constructor_specifiers");
      );
      Token (Name "function_declarator");
      Token (Literal ";");
    ];
  );
  "constructor_or_destructor_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "constructor_specifiers");
      );
      Token (Name "function_declarator");
      Alt [|
        Seq [
          Opt (
            Token (Name "field_initializer_list");
          );
          Token (Name "compound_statement");
        ];
        Token (Name "constructor_try_statement");
        Token (Name "default_method_clause");
        Token (Name "delete_method_clause");
      |];
    ];
  );
  "constructor_specifiers",
  Some (
    Alt [|
      Token (Name "declaration_modifiers");
      Token (Name "explicit_function_specifier");
    |];
  );
  "constructor_try_statement",
  Some (
    Seq [
      Token (Literal "try");
      Opt (
        Token (Name "field_initializer_list");
      );
      Token (Name "compound_statement");
      Repeat1 (
        Token (Name "catch_clause");
      );
    ];
  );
  "declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Token (Name "declaration_declarator");
      Token (Literal ";");
    ];
  );
  "declaration_declarator",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Name "declarator");
          Opt (
            Token (Name "gnu_asm_expression");
          );
        ];
        Token (Name "init_declarator");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Seq [
              Token (Name "declarator");
              Opt (
                Token (Name "gnu_asm_expression");
              );
            ];
            Token (Name "init_declarator");
          |];
        ];
      );
    ];
  );
  "declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_definition");
            Token (Name "linkage_specification");
            Token (Name "declaration");
            Alt [|
              Token (Name "case_statement");
              Alt [|
                Alt [|
                  Token (Name "attributed_statement");
                  Token (Name "labeled_statement");
                  Token (Name "compound_statement");
                  Token (Name "expression_statement");
                  Token (Name "if_statement");
                  Token (Name "switch_statement");
                  Token (Name "do_statement");
                  Token (Name "while_statement");
                  Token (Name "for_statement");
                  Token (Name "return_statement");
                  Token (Name "break_statement");
                  Token (Name "continue_statement");
                  Token (Name "goto_statement");
                  Token (Name "seh_try_statement");
                  Token (Name "seh_leave_statement");
                |];
                Token (Name "co_return_statement");
                Token (Name "co_yield_statement");
                Token (Name "for_range_loop");
                Token (Name "try_statement");
                Token (Name "throw_statement");
              |];
            |];
            Token (Name "attributed_statement");
            Token (Name "type_definition");
            Token (Name "empty_declaration");
            Token (Name "preproc_if");
            Token (Name "preproc_ifdef");
            Token (Name "preproc_include");
            Token (Name "preproc_def");
            Token (Name "preproc_function_def");
            Token (Name "preproc_call");
            Token (Name "namespace_definition");
            Token (Name "concept_definition");
            Token (Name "namespace_alias_definition");
            Token (Name "using_declaration");
            Token (Name "alias_declaration");
            Token (Name "static_assert_declaration");
            Token (Name "template_declaration");
            Token (Name "template_instantiation");
            Token (Name "constructor_or_destructor_definition");
            Token (Name "operator_cast_definition");
            Token (Name "operator_cast_declaration");
          |];
          Token (Name "semgrep_ellipsis");
        |];
      );
      Token (Literal "}");
    ];
  );
  "declaration_modifiers",
  Some (
    Alt [|
      Alt [|
        Token (Name "storage_class_specifier");
        Token (Name "type_qualifier");
        Token (Name "attribute_specifier");
        Token (Name "attribute_declaration");
        Token (Name "ms_declspec_modifier");
      |];
      Token (Name "virtual");
      Token (Name "alignas_specifier");
    |];
  );
  "declaration_specifiers",
  Some (
    Seq [
      Repeat (
        Token (Name "declaration_modifiers");
      );
      Token (Name "type_specifier");
      Repeat (
        Token (Name "declaration_modifiers");
      );
    ];
  );
  "declarator",
  Some (
    Alt [|
      Alt [|
        Token (Name "attributed_declarator");
        Token (Name "pointer_declarator");
        Token (Name "function_declarator");
        Token (Name "array_declarator");
        Token (Name "parenthesized_declarator");
        Token (Name "identifier");
      |];
      Token (Name "reference_declarator");
      Token (Name "qualified_identifier");
      Token (Name "template_function");
      Token (Name "operator_name");
      Token (Name "destructor_name");
      Token (Name "structured_binding_declarator");
    |];
  );
  "decltype",
  Some (
    Seq [
      Token (Literal "decltype");
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "deep_ellipsis",
  Some (
    Seq [
      Token (Literal "<...");
      Token (Name "expression");
      Token (Literal "...>");
    ];
  );
  "delete_expression",
  Some (
    Seq [
      Opt (
        Token (Literal "::");
      );
      Token (Literal "delete");
      Opt (
        Seq [
          Token (Literal "[");
          Token (Literal "]");
        ];
      );
      Token (Name "expression");
    ];
  );
  "dependent_field_identifier",
  Some (
    Seq [
      Token (Literal "template");
      Token (Name "template_method");
    ];
  );
  "dependent_identifier",
  Some (
    Seq [
      Token (Literal "template");
      Token (Name "template_function");
    ];
  );
  "dependent_type",
  Some (
    Seq [
      Token (Literal "typename");
      Token (Name "type_specifier");
    ];
  );
  "dependent_type_identifier",
  Some (
    Seq [
      Token (Literal "template");
      Token (Name "template_type");
    ];
  );
  "do_statement",
  Some (
    Seq [
      Token (Literal "do");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Alt [|
            Token (Name "attributed_statement");
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
            Token (Name "seh_try_statement");
            Token (Name "seh_leave_statement");
          |];
          Token (Name "co_return_statement");
          Token (Name "co_yield_statement");
          Token (Name "for_range_loop");
          Token (Name "try_statement");
          Token (Name "throw_statement");
        |];
      |];
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Token (Literal ";");
    ];
  );
  "else_clause",
  Some (
    Seq [
      Token (Literal "else");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Alt [|
            Token (Name "attributed_statement");
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
            Token (Name "seh_try_statement");
            Token (Name "seh_leave_statement");
          |];
          Token (Name "co_return_statement");
          Token (Name "co_yield_statement");
          Token (Name "for_range_loop");
          Token (Name "try_statement");
          Token (Name "throw_statement");
        |];
      |];
    ];
  );
  "empty_declaration",
  Some (
    Seq [
      Token (Name "type_specifier");
      Token (Literal ";");
    ];
  );
  "enum_base_clause",
  Some (
    Seq [
      Token (Literal ":");
      Alt [|
        Token (Name "qualified_type_identifier");
        Token (Name "identifier");
        Token (Name "primitive_type");
        Token (Name "sized_type_specifier");
      |];
    ];
  );
  "enum_specifier",
  Some (
    Seq [
      Token (Literal "enum");
      Opt (
        Alt [|
          Token (Literal "class");
          Token (Literal "struct");
        |];
      );
      Alt [|
        Seq [
          Token (Name "class_name");
          Opt (
            Token (Name "enum_base_clause");
          );
          Opt (
            Token (Name "enumerator_list");
          );
        ];
        Token (Name "enumerator_list");
      |];
      Opt (
        Token (Name "attribute_specifier");
      );
    ];
  );
  "enumerator",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "enumerator_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Seq [
            Token (Name "enumerator");
            Token (Literal ",");
          ];
          Token (Name "preproc_if_in_enumerator_list");
          Token (Name "preproc_ifdef_in_enumerator_list");
          Seq [
            Token (Name "preproc_call");
            Token (Literal ",");
          ];
        |];
      );
      Opt (
        Seq [
          Alt [|
            Token (Name "enumerator");
            Token (Name "preproc_if_in_enumerator_list_no_comma");
            Token (Name "preproc_ifdef_in_enumerator_list_no_comma");
            Token (Name "preproc_call");
          |];
        ];
      );
      Token (Literal "}");
    ];
  );
  "explicit_function_specifier",
  Some (
    Alt [|
      Token (Literal "explicit");
      Seq [
        Token (Literal "explicit");
        Token (Literal "(");
        Token (Name "expression");
        Token (Literal ")");
      ];
    |];
  );
  "expression",
  Some (
    Alt [|
      Alt [|
        Token (Name "expression_not_binary");
        Token (Name "binary_expression");
      |];
      Token (Name "semgrep_ellipsis");
      Token (Name "deep_ellipsis");
      Token (Name "semgrep_named_ellipsis");
    |];
  );
  "expression_not_binary",
  Some (
    Alt [|
      Alt [|
        Token (Name "conditional_expression");
        Token (Name "assignment_expression");
        Token (Name "unary_expression");
        Token (Name "update_expression");
        Token (Name "cast_expression");
        Token (Name "pointer_expression");
        Token (Name "sizeof_expression");
        Token (Name "alignof_expression");
        Token (Name "offsetof_expression");
        Token (Name "generic_expression");
        Token (Name "subscript_expression");
        Token (Name "call_expression");
        Token (Name "field_expression");
        Token (Name "compound_literal_expression");
        Token (Name "identifier");
        Token (Name "number_literal");
        Token (Name "string_literal");
        Token (Name "true");
        Token (Name "false");
        Token (Name "null");
        Token (Name "concatenated_string");
        Token (Name "char_literal");
        Token (Name "parenthesized_expression");
        Token (Name "gnu_asm_expression");
      |];
      Token (Name "co_await_expression");
      Token (Name "requires_expression");
      Token (Name "requires_clause");
      Token (Name "template_function");
      Token (Name "qualified_identifier");
      Token (Name "new_expression");
      Token (Name "delete_expression");
      Token (Name "lambda_expression");
      Token (Name "parameter_pack_expansion");
      Token (Name "this");
      Token (Name "raw_string_literal");
      Token (Name "user_defined_literal");
      Token (Name "fold_expression");
    |];
  );
  "expression_statement",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "comma_expression");
        |];
      );
      Token (Literal ";");
    ];
  );
  "field_declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Opt (
        Seq [
          Token (Name "field_declarator");
          Opt (
            Alt [|
              Token (Name "bitfield_clause");
              Token (Name "initializer_list");
              Seq [
                Token (Literal "=");
                Alt [|
                  Token (Name "expression");
                  Token (Name "initializer_list");
                |];
              ];
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "field_declarator");
              Opt (
                Alt [|
                  Token (Name "bitfield_clause");
                  Token (Name "initializer_list");
                  Seq [
                    Token (Literal "=");
                    Alt [|
                      Token (Name "expression");
                      Token (Name "initializer_list");
                    |];
                  ];
                |];
              );
            ];
          );
        ];
      );
      Opt (
        Token (Name "attribute_specifier");
      );
      Token (Literal ";");
    ];
  );
  "field_declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Token (Literal "}");
    ];
  );
  "field_declaration_list_item",
  Some (
    Alt [|
      Alt [|
        Token (Name "field_declaration");
        Token (Name "preproc_def");
        Token (Name "preproc_function_def");
        Token (Name "preproc_call");
        Token (Name "preproc_if_in_field_declaration_list");
        Token (Name "preproc_ifdef_in_field_declaration_list");
      |];
      Token (Name "template_declaration");
      Token (Name "inline_method_definition");
      Token (Name "constructor_or_destructor_definition");
      Token (Name "constructor_or_destructor_declaration");
      Token (Name "operator_cast_definition");
      Token (Name "operator_cast_declaration");
      Token (Name "friend_declaration");
      Seq [
        Token (Name "access_specifier");
        Token (Literal ":");
      ];
      Token (Name "alias_declaration");
      Token (Name "using_declaration");
      Token (Name "type_definition");
      Token (Name "static_assert_declaration");
    |];
  );
  "field_declarator",
  Some (
    Alt [|
      Alt [|
        Token (Name "attributed_field_declarator");
        Token (Name "pointer_field_declarator");
        Token (Name "function_field_declarator");
        Token (Name "array_field_declarator");
        Token (Name "parenthesized_field_declarator");
        Alt [|
          Token (Name "identifier");
          Token (Name "semgrep_ellipsis");
        |];
      |];
      Token (Name "reference_field_declarator");
      Token (Name "template_method");
      Token (Name "operator_name");
    |];
  );
  "field_expression",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Literal ".");
        Token (Literal ".*");
        Token (Literal "->");
      |];
      Alt [|
        Alt [|
          Token (Name "identifier");
          Token (Name "semgrep_ellipsis");
        |];
        Token (Name "destructor_name");
        Token (Name "template_method");
        Token (Name "dependent_field_identifier");
      |];
    ];
  );
  "field_initializer",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "identifier");
          Token (Name "semgrep_ellipsis");
        |];
        Token (Name "template_method");
        Token (Name "qualified_field_identifier");
      |];
      Alt [|
        Token (Name "initializer_list");
        Token (Name "argument_list");
      |];
      Opt (
        Token (Literal "...");
      );
    ];
  );
  "field_initializer_list",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "field_initializer");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "field_initializer");
        ];
      );
    ];
  );
  "fold_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "unary_right_fold");
        Token (Name "unary_left_fold");
        Token (Name "binary_fold");
      |];
      Token (Literal ")");
    ];
  );
  "for_range_loop",
  Some (
    Seq [
      Token (Literal "for");
      Token (Literal "(");
      Token (Name "for_range_loop_body");
      Token (Literal ")");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Alt [|
            Token (Name "attributed_statement");
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
            Token (Name "seh_try_statement");
            Token (Name "seh_leave_statement");
          |];
          Token (Name "co_return_statement");
          Token (Name "co_yield_statement");
          Token (Name "for_range_loop");
          Token (Name "try_statement");
          Token (Name "throw_statement");
        |];
      |];
    ];
  );
  "for_range_loop_body",
  Some (
    Seq [
      Opt (
        Token (Name "init_statement");
      );
      Token (Name "declaration_specifiers");
      Token (Name "declarator");
      Token (Literal ":");
      Alt [|
        Token (Name "expression");
        Token (Name "initializer_list");
      |];
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Token (Literal "(");
      Token (Name "for_statement_body");
      Token (Literal ")");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Alt [|
            Token (Name "attributed_statement");
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
            Token (Name "seh_try_statement");
            Token (Name "seh_leave_statement");
          |];
          Token (Name "co_return_statement");
          Token (Name "co_yield_statement");
          Token (Name "for_range_loop");
          Token (Name "try_statement");
          Token (Name "throw_statement");
        |];
      |];
    ];
  );
  "for_statement_body",
  Some (
    Seq [
      Alt [|
        Token (Name "declaration");
        Seq [
          Opt (
            Alt [|
              Token (Name "expression");
              Token (Name "comma_expression");
            |];
          );
          Token (Literal ";");
        ];
      |];
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "comma_expression");
        |];
      );
      Token (Literal ";");
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "comma_expression");
        |];
      );
    ];
  );
  "friend_declaration",
  Some (
    Seq [
      Token (Literal "friend");
      Alt [|
        Token (Name "declaration");
        Token (Name "function_definition");
        Seq [
          Opt (
            Alt [|
              Token (Literal "class");
              Token (Literal "struct");
              Token (Literal "union");
            |];
          );
          Token (Name "class_name");
          Token (Literal ";");
        ];
      |];
    ];
  );
  "function_attributes_end",
  Some (
    Seq [
      Opt (
        Token (Name "gnu_asm_expression");
      );
      Alt [|
        Seq [
          Repeat1 (
            Token (Name "attribute_specifier");
          );
          Repeat (
            Token (Name "attribute_declaration");
          );
        ];
        Seq [
          Repeat (
            Token (Name "attribute_specifier");
          );
          Repeat1 (
            Token (Name "attribute_declaration");
          );
        ];
      |];
    ];
  );
  "function_attributes_start",
  Some (
    Alt [|
      Seq [
        Repeat1 (
          Token (Name "attribute_specifier");
        );
        Repeat (
          Token (Name "type_qualifier");
        );
      ];
      Seq [
        Repeat (
          Token (Name "attribute_specifier");
        );
        Repeat1 (
          Token (Name "type_qualifier");
        );
      ];
    |];
  );
  "function_declarator",
  Some (
    Seq [
      Token (Name "declarator");
      Token (Name "function_declarator_seq");
    ];
  );
  "function_declarator_seq",
  Some (
    Seq [
      Token (Name "parameter_list");
      Opt (
        Token (Name "function_attributes_start");
      );
      Opt (
        Token (Name "ref_qualifier");
      );
      Opt (
        Token (Name "function_exception_specification");
      );
      Opt (
        Token (Name "function_attributes_end");
      );
      Opt (
        Token (Name "trailing_return_type");
      );
      Opt (
        Token (Name "function_postfix");
      );
    ];
  );
  "function_definition",
  Some (
    Seq [
      Opt (
        Token (Name "ms_call_modifier");
      );
      Token (Name "declaration_specifiers");
      Token (Name "declarator");
      Alt [|
        Token (Name "compound_statement");
        Token (Name "try_statement");
      |];
    ];
  );
  "function_exception_specification",
  Some (
    Alt [|
      Token (Name "noexcept");
      Token (Name "throw_specifier");
    |];
  );
  "function_field_declarator",
  Some (
    Seq [
      Token (Name "field_declarator");
      Token (Name "function_declarator_seq");
    ];
  );
  "function_postfix",
  Some (
    Alt [|
      Repeat1 (
        Token (Name "virtual_specifier");
      );
      Token (Name "requires_clause");
    |];
  );
  "function_type_declarator",
  Some (
    Seq [
      Token (Name "type_declarator");
      Token (Name "parameter_list");
    ];
  );
  "generic_expression",
  Some (
    Seq [
      Token (Literal "_Generic");
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ",");
      Token (Name "type_descriptor");
      Token (Literal ":");
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_descriptor");
          Token (Literal ":");
          Token (Name "expression");
        ];
      );
      Token (Literal ")");
    ];
  );
  "gnu_asm_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "asm");
        Token (Literal "__asm__");
      |];
      Repeat (
        Token (Name "gnu_asm_qualifier");
      );
      Token (Literal "(");
      Alt [|
        Token (Name "string_literal");
        Token (Name "concatenated_string");
      |];
      Opt (
        Seq [
          Token (Name "gnu_asm_output_operand_list");
          Opt (
            Seq [
              Token (Name "gnu_asm_input_operand_list");
              Opt (
                Seq [
                  Token (Name "gnu_asm_clobber_list");
                  Opt (
                    Token (Name "gnu_asm_goto_list");
                  );
                ];
              );
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "gnu_asm_input_operand",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Literal "[");
          Token (Name "identifier");
          Token (Literal "]");
        ];
      );
      Token (Name "string_literal");
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "gnu_asm_input_operand_list",
  Some (
    Seq [
      Token (Literal ":");
      Opt (
        Seq [
          Token (Name "gnu_asm_input_operand");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "gnu_asm_input_operand");
            ];
          );
        ];
      );
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Opt (
        Token (Literal "constexpr");
      );
      Token (Name "condition_clause");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Alt [|
            Token (Name "attributed_statement");
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
            Token (Name "seh_try_statement");
            Token (Name "seh_leave_statement");
          |];
          Token (Name "co_return_statement");
          Token (Name "co_yield_statement");
          Token (Name "for_range_loop");
          Token (Name "try_statement");
          Token (Name "throw_statement");
        |];
      |];
      Opt (
        Token (Name "else_clause");
      );
    ];
  );
  "init_declarator",
  Some (
    Alt [|
      Seq [
        Token (Name "declarator");
        Token (Literal "=");
        Alt [|
          Token (Name "initializer_list");
          Token (Name "expression");
        |];
      ];
      Seq [
        Token (Name "declarator");
        Alt [|
          Token (Name "argument_list");
          Token (Name "initializer_list");
        |];
      ];
    |];
  );
  "init_statement",
  Some (
    Alt [|
      Token (Name "alias_declaration");
      Token (Name "type_definition");
      Token (Name "declaration");
      Token (Name "expression_statement");
    |];
  );
  "initializer_list",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "initializer_pair");
            Token (Name "expression");
            Token (Name "initializer_list");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "initializer_pair");
                Token (Name "expression");
                Token (Name "initializer_list");
              |];
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "initializer_pair",
  Some (
    Alt [|
      Seq [
        Repeat1 (
          Alt [|
            Token (Name "subscript_designator");
            Token (Name "field_designator");
            Token (Name "subscript_range_designator");
          |];
        );
        Token (Literal "=");
        Alt [|
          Token (Name "expression");
          Token (Name "initializer_list");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "identifier");
          Token (Name "semgrep_ellipsis");
        |];
        Token (Literal ":");
        Alt [|
          Token (Name "expression");
          Token (Name "initializer_list");
        |];
      ];
    |];
  );
  "inline_method_definition",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Token (Name "field_declarator");
      Alt [|
        Alt [|
          Token (Name "compound_statement");
          Token (Name "try_statement");
        |];
        Token (Name "default_method_clause");
        Token (Name "delete_method_clause");
      |];
    ];
  );
  "labeled_statement",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal ":");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Alt [|
            Token (Name "attributed_statement");
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
            Token (Name "seh_try_statement");
            Token (Name "seh_leave_statement");
          |];
          Token (Name "co_return_statement");
          Token (Name "co_yield_statement");
          Token (Name "for_range_loop");
          Token (Name "try_statement");
          Token (Name "throw_statement");
        |];
      |];
    ];
  );
  "lambda_capture_specifier",
  Some (
    Seq [
      Token (Literal "[");
      Alt [|
        Token (Name "lambda_default_capture");
        Opt (
          Seq [
            Token (Name "expression");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "expression");
              ];
            );
          ];
        );
        Seq [
          Token (Name "lambda_default_capture");
          Token (Literal ",");
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      |];
      Token (Literal "]");
    ];
  );
  "lambda_expression",
  Some (
    Seq [
      Token (Name "lambda_capture_specifier");
      Opt (
        Seq [
          Token (Name "template_parameter_list");
          Opt (
            Token (Name "requires_clause");
          );
        ];
      );
      Opt (
        Token (Name "abstract_function_declarator");
      );
      Token (Name "compound_statement");
    ];
  );
  "linkage_specification",
  Some (
    Seq [
      Token (Literal "extern");
      Token (Name "string_literal");
      Alt [|
        Token (Name "function_definition");
        Token (Name "declaration");
        Token (Name "declaration_list");
      |];
    ];
  );
  "ms_based_modifier",
  Some (
    Seq [
      Token (Literal "__based");
      Token (Name "argument_list");
    ];
  );
  "namespace_definition",
  Some (
    Seq [
      Opt (
        Token (Literal "inline");
      );
      Token (Literal "namespace");
      Opt (
        Alt [|
          Token (Name "identifier");
          Token (Name "nested_namespace_specifier");
        |];
      );
      Token (Name "declaration_list");
    ];
  );
  "new_declarator",
  Some (
    Alt [|
      Seq [
        Token (Literal "[");
        Token (Name "expression");
        Token (Literal "]");
        Opt (
          Token (Name "new_declarator");
        );
      ];
    |];
  );
  "new_expression",
  Some (
    Seq [
      Opt (
        Token (Literal "::");
      );
      Token (Literal "new");
      Opt (
        Token (Name "argument_list");
      );
      Token (Name "type_specifier");
      Opt (
        Token (Name "new_declarator");
      );
      Opt (
        Alt [|
          Token (Name "argument_list");
          Token (Name "initializer_list");
        |];
      );
    ];
  );
  "noexcept",
  Some (
    Seq [
      Token (Literal "noexcept");
      Opt (
        Seq [
          Token (Literal "(");
          Opt (
            Token (Name "expression");
          );
          Token (Literal ")");
        ];
      );
    ];
  );
  "offsetof_expression",
  Some (
    Seq [
      Token (Literal "offsetof");
      Token (Literal "(");
      Token (Name "type_descriptor");
      Token (Literal ",");
      Alt [|
        Token (Name "identifier");
        Token (Name "semgrep_ellipsis");
      |];
      Token (Literal ")");
    ];
  );
  "operator_cast",
  Some (
    Seq [
      Token (Literal "operator");
      Token (Name "declaration_specifiers");
      Token (Name "abstract_declarator");
    ];
  );
  "operator_cast_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "constructor_specifiers");
      );
      Alt [|
        Token (Name "operator_cast");
        Token (Name "qualified_operator_cast_identifier");
      |];
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
      Token (Literal ";");
    ];
  );
  "operator_cast_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "constructor_specifiers");
      );
      Alt [|
        Token (Name "operator_cast");
        Token (Name "qualified_operator_cast_identifier");
      |];
      Alt [|
        Token (Name "compound_statement");
        Token (Name "try_statement");
      |];
    ];
  );
  "optional_parameter_declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Opt (
        Alt [|
          Token (Name "declarator");
          Token (Name "abstract_reference_declarator");
        |];
      );
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "optional_type_parameter_declaration",
  Some (
    Seq [
      Alt [|
        Token (Literal "typename");
        Token (Literal "class");
      |];
      Opt (
        Token (Name "identifier");
      );
      Token (Literal "=");
      Token (Name "type_specifier");
    ];
  );
  "parameter_declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Opt (
        Alt [|
          Token (Name "declarator");
          Token (Name "abstract_declarator");
        |];
      );
    ];
  );
  "parameter_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "parameter_declaration");
            Token (Name "optional_parameter_declaration");
            Token (Name "variadic_parameter_declaration");
            Token (Literal "...");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "parameter_declaration");
                Token (Name "optional_parameter_declaration");
                Token (Name "variadic_parameter_declaration");
                Token (Literal "...");
              |];
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "parameter_pack_expansion",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "...");
    ];
  );
  "parenthesized_declarator",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "declarator");
      Token (Literal ")");
    ];
  );
  "parenthesized_expression",
  Some (
    Alt [|
      Alt [|
        Seq [
          Token (Literal "(");
          Alt [|
            Token (Name "expression");
            Token (Name "comma_expression");
          |];
          Token (Literal ")");
        ];
        Seq [
          Token (Literal "(");
          Token (Name "assignment_expression_lhs_expression");
          Token (Literal ")");
        ];
      |];
      Seq [
        Token (Literal "(");
        Token (Name "semgrep_typed_metavar");
        Token (Literal ")");
      ];
    |];
  );
  "parenthesized_field_declarator",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "field_declarator");
      Token (Literal ")");
    ];
  );
  "parenthesized_type_declarator",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type_declarator");
      Token (Literal ")");
    ];
  );
  "placeholder_type_specifier",
  Some (
    Seq [
      Opt (
        Token (Name "type_specifier");
      );
      Alt [|
        Token (Name "auto");
        Token (Name "decltype_auto");
      |];
    ];
  );
  "pointer_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "ms_based_modifier");
      );
      Token (Literal "*");
      Repeat (
        Token (Name "ms_pointer_modifier");
      );
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "declarator");
    ];
  );
  "pointer_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "*");
        Token (Literal "&");
      |];
      Token (Name "expression");
    ];
  );
  "pointer_field_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "ms_based_modifier");
      );
      Token (Literal "*");
      Repeat (
        Token (Name "ms_pointer_modifier");
      );
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "field_declarator");
    ];
  );
  "pointer_type_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "ms_based_modifier");
      );
      Token (Literal "*");
      Repeat (
        Token (Name "ms_pointer_modifier");
      );
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "type_declarator");
    ];
  );
  "preproc_elif",
  Some (
    Seq [
      Token (Name "pat_bfeb4bb");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_definition");
            Token (Name "linkage_specification");
            Token (Name "declaration");
            Alt [|
              Token (Name "case_statement");
              Alt [|
                Alt [|
                  Token (Name "attributed_statement");
                  Token (Name "labeled_statement");
                  Token (Name "compound_statement");
                  Token (Name "expression_statement");
                  Token (Name "if_statement");
                  Token (Name "switch_statement");
                  Token (Name "do_statement");
                  Token (Name "while_statement");
                  Token (Name "for_statement");
                  Token (Name "return_statement");
                  Token (Name "break_statement");
                  Token (Name "continue_statement");
                  Token (Name "goto_statement");
                  Token (Name "seh_try_statement");
                  Token (Name "seh_leave_statement");
                |];
                Token (Name "co_return_statement");
                Token (Name "co_yield_statement");
                Token (Name "for_range_loop");
                Token (Name "try_statement");
                Token (Name "throw_statement");
              |];
            |];
            Token (Name "attributed_statement");
            Token (Name "type_definition");
            Token (Name "empty_declaration");
            Token (Name "preproc_if");
            Token (Name "preproc_ifdef");
            Token (Name "preproc_include");
            Token (Name "preproc_def");
            Token (Name "preproc_function_def");
            Token (Name "preproc_call");
            Token (Name "namespace_definition");
            Token (Name "concept_definition");
            Token (Name "namespace_alias_definition");
            Token (Name "using_declaration");
            Token (Name "alias_declaration");
            Token (Name "static_assert_declaration");
            Token (Name "template_declaration");
            Token (Name "template_instantiation");
            Token (Name "constructor_or_destructor_definition");
            Token (Name "operator_cast_definition");
            Token (Name "operator_cast_declaration");
          |];
          Token (Name "semgrep_ellipsis");
        |];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else");
          Token (Name "preproc_elif");
        |];
      );
    ];
  );
  "preproc_elif_in_enumerator_list",
  Some (
    Seq [
      Token (Name "pat_bfeb4bb");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Seq [
          Token (Name "enumerator");
          Token (Literal ",");
        ];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_enumerator_list");
          Token (Name "preproc_elif_in_enumerator_list");
        |];
      );
    ];
  );
  "preproc_elif_in_enumerator_list_no_comma",
  Some (
    Seq [
      Token (Name "pat_bfeb4bb");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Token (Name "enumerator");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_enumerator_list_no_comma");
          Token (Name "preproc_elif_in_enumerator_list_no_comma");
        |];
      );
    ];
  );
  "preproc_elif_in_field_declaration_list",
  Some (
    Seq [
      Token (Name "pat_bfeb4bb");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_field_declaration_list");
          Token (Name "preproc_elif_in_field_declaration_list");
        |];
      );
    ];
  );
  "preproc_elifdef",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_0307ca2");
        Token (Name "pat_a6d4183");
      |];
      Token (Name "identifier");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_definition");
            Token (Name "linkage_specification");
            Token (Name "declaration");
            Alt [|
              Token (Name "case_statement");
              Alt [|
                Alt [|
                  Token (Name "attributed_statement");
                  Token (Name "labeled_statement");
                  Token (Name "compound_statement");
                  Token (Name "expression_statement");
                  Token (Name "if_statement");
                  Token (Name "switch_statement");
                  Token (Name "do_statement");
                  Token (Name "while_statement");
                  Token (Name "for_statement");
                  Token (Name "return_statement");
                  Token (Name "break_statement");
                  Token (Name "continue_statement");
                  Token (Name "goto_statement");
                  Token (Name "seh_try_statement");
                  Token (Name "seh_leave_statement");
                |];
                Token (Name "co_return_statement");
                Token (Name "co_yield_statement");
                Token (Name "for_range_loop");
                Token (Name "try_statement");
                Token (Name "throw_statement");
              |];
            |];
            Token (Name "attributed_statement");
            Token (Name "type_definition");
            Token (Name "empty_declaration");
            Token (Name "preproc_if");
            Token (Name "preproc_ifdef");
            Token (Name "preproc_include");
            Token (Name "preproc_def");
            Token (Name "preproc_function_def");
            Token (Name "preproc_call");
            Token (Name "namespace_definition");
            Token (Name "concept_definition");
            Token (Name "namespace_alias_definition");
            Token (Name "using_declaration");
            Token (Name "alias_declaration");
            Token (Name "static_assert_declaration");
            Token (Name "template_declaration");
            Token (Name "template_instantiation");
            Token (Name "constructor_or_destructor_definition");
            Token (Name "operator_cast_definition");
            Token (Name "operator_cast_declaration");
          |];
          Token (Name "semgrep_ellipsis");
        |];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else");
          Token (Name "preproc_elif");
        |];
      );
    ];
  );
  "preproc_elifdef_in_enumerator_list",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_0307ca2");
        Token (Name "pat_a6d4183");
      |];
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Name "enumerator");
          Token (Literal ",");
        ];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_enumerator_list");
          Token (Name "preproc_elif_in_enumerator_list");
        |];
      );
    ];
  );
  "preproc_elifdef_in_enumerator_list_no_comma",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_0307ca2");
        Token (Name "pat_a6d4183");
      |];
      Token (Name "identifier");
      Repeat (
        Token (Name "enumerator");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_enumerator_list_no_comma");
          Token (Name "preproc_elif_in_enumerator_list_no_comma");
        |];
      );
    ];
  );
  "preproc_elifdef_in_field_declaration_list",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_0307ca2");
        Token (Name "pat_a6d4183");
      |];
      Token (Name "identifier");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_field_declaration_list");
          Token (Name "preproc_elif_in_field_declaration_list");
        |];
      );
    ];
  );
  "preproc_else",
  Some (
    Seq [
      Token (Name "pat_56631e5");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_definition");
            Token (Name "linkage_specification");
            Token (Name "declaration");
            Alt [|
              Token (Name "case_statement");
              Alt [|
                Alt [|
                  Token (Name "attributed_statement");
                  Token (Name "labeled_statement");
                  Token (Name "compound_statement");
                  Token (Name "expression_statement");
                  Token (Name "if_statement");
                  Token (Name "switch_statement");
                  Token (Name "do_statement");
                  Token (Name "while_statement");
                  Token (Name "for_statement");
                  Token (Name "return_statement");
                  Token (Name "break_statement");
                  Token (Name "continue_statement");
                  Token (Name "goto_statement");
                  Token (Name "seh_try_statement");
                  Token (Name "seh_leave_statement");
                |];
                Token (Name "co_return_statement");
                Token (Name "co_yield_statement");
                Token (Name "for_range_loop");
                Token (Name "try_statement");
                Token (Name "throw_statement");
              |];
            |];
            Token (Name "attributed_statement");
            Token (Name "type_definition");
            Token (Name "empty_declaration");
            Token (Name "preproc_if");
            Token (Name "preproc_ifdef");
            Token (Name "preproc_include");
            Token (Name "preproc_def");
            Token (Name "preproc_function_def");
            Token (Name "preproc_call");
            Token (Name "namespace_definition");
            Token (Name "concept_definition");
            Token (Name "namespace_alias_definition");
            Token (Name "using_declaration");
            Token (Name "alias_declaration");
            Token (Name "static_assert_declaration");
            Token (Name "template_declaration");
            Token (Name "template_instantiation");
            Token (Name "constructor_or_destructor_definition");
            Token (Name "operator_cast_definition");
            Token (Name "operator_cast_declaration");
          |];
          Token (Name "semgrep_ellipsis");
        |];
      );
    ];
  );
  "preproc_else_in_enumerator_list",
  Some (
    Seq [
      Token (Name "pat_56631e5");
      Repeat (
        Seq [
          Token (Name "enumerator");
          Token (Literal ",");
        ];
      );
    ];
  );
  "preproc_else_in_enumerator_list_no_comma",
  Some (
    Seq [
      Token (Name "pat_56631e5");
      Repeat (
        Token (Name "enumerator");
      );
    ];
  );
  "preproc_else_in_field_declaration_list",
  Some (
    Seq [
      Token (Name "pat_56631e5");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
    ];
  );
  "preproc_if",
  Some (
    Seq [
      Token (Name "pat_3df6e71");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_definition");
            Token (Name "linkage_specification");
            Token (Name "declaration");
            Alt [|
              Token (Name "case_statement");
              Alt [|
                Alt [|
                  Token (Name "attributed_statement");
                  Token (Name "labeled_statement");
                  Token (Name "compound_statement");
                  Token (Name "expression_statement");
                  Token (Name "if_statement");
                  Token (Name "switch_statement");
                  Token (Name "do_statement");
                  Token (Name "while_statement");
                  Token (Name "for_statement");
                  Token (Name "return_statement");
                  Token (Name "break_statement");
                  Token (Name "continue_statement");
                  Token (Name "goto_statement");
                  Token (Name "seh_try_statement");
                  Token (Name "seh_leave_statement");
                |];
                Token (Name "co_return_statement");
                Token (Name "co_yield_statement");
                Token (Name "for_range_loop");
                Token (Name "try_statement");
                Token (Name "throw_statement");
              |];
            |];
            Token (Name "attributed_statement");
            Token (Name "type_definition");
            Token (Name "empty_declaration");
            Token (Name "preproc_if");
            Token (Name "preproc_ifdef");
            Token (Name "preproc_include");
            Token (Name "preproc_def");
            Token (Name "preproc_function_def");
            Token (Name "preproc_call");
            Token (Name "namespace_definition");
            Token (Name "concept_definition");
            Token (Name "namespace_alias_definition");
            Token (Name "using_declaration");
            Token (Name "alias_declaration");
            Token (Name "static_assert_declaration");
            Token (Name "template_declaration");
            Token (Name "template_instantiation");
            Token (Name "constructor_or_destructor_definition");
            Token (Name "operator_cast_definition");
            Token (Name "operator_cast_declaration");
          |];
          Token (Name "semgrep_ellipsis");
        |];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else");
          Token (Name "preproc_elif");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_if_in_enumerator_list",
  Some (
    Seq [
      Token (Name "pat_3df6e71");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Seq [
          Token (Name "enumerator");
          Token (Literal ",");
        ];
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_enumerator_list");
          Token (Name "preproc_elif_in_enumerator_list");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_if_in_enumerator_list_no_comma",
  Some (
    Seq [
      Token (Name "pat_3df6e71");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Token (Name "enumerator");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_enumerator_list_no_comma");
          Token (Name "preproc_elif_in_enumerator_list_no_comma");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_if_in_field_declaration_list",
  Some (
    Seq [
      Token (Name "pat_3df6e71");
      Token (Name "preproc_expression");
      Token (Literal "\n");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Opt (
        Alt [|
          Token (Name "preproc_else_in_field_declaration_list");
          Token (Name "preproc_elif_in_field_declaration_list");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_ifdef",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_25b90ba");
        Token (Name "pat_9d92f6a");
      |];
      Token (Name "identifier");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_definition");
            Token (Name "linkage_specification");
            Token (Name "declaration");
            Alt [|
              Token (Name "case_statement");
              Alt [|
                Alt [|
                  Token (Name "attributed_statement");
                  Token (Name "labeled_statement");
                  Token (Name "compound_statement");
                  Token (Name "expression_statement");
                  Token (Name "if_statement");
                  Token (Name "switch_statement");
                  Token (Name "do_statement");
                  Token (Name "while_statement");
                  Token (Name "for_statement");
                  Token (Name "return_statement");
                  Token (Name "break_statement");
                  Token (Name "continue_statement");
                  Token (Name "goto_statement");
                  Token (Name "seh_try_statement");
                  Token (Name "seh_leave_statement");
                |];
                Token (Name "co_return_statement");
                Token (Name "co_yield_statement");
                Token (Name "for_range_loop");
                Token (Name "try_statement");
                Token (Name "throw_statement");
              |];
            |];
            Token (Name "attributed_statement");
            Token (Name "type_definition");
            Token (Name "empty_declaration");
            Token (Name "preproc_if");
            Token (Name "preproc_ifdef");
            Token (Name "preproc_include");
            Token (Name "preproc_def");
            Token (Name "preproc_function_def");
            Token (Name "preproc_call");
            Token (Name "namespace_definition");
            Token (Name "concept_definition");
            Token (Name "namespace_alias_definition");
            Token (Name "using_declaration");
            Token (Name "alias_declaration");
            Token (Name "static_assert_declaration");
            Token (Name "template_declaration");
            Token (Name "template_instantiation");
            Token (Name "constructor_or_destructor_definition");
            Token (Name "operator_cast_definition");
            Token (Name "operator_cast_declaration");
          |];
          Token (Name "semgrep_ellipsis");
        |];
      );
      Opt (
        Alt [|
          Alt [|
            Token (Name "preproc_else");
            Token (Name "preproc_elif");
          |];
          Token (Name "preproc_elifdef");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_ifdef_in_enumerator_list",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_25b90ba");
        Token (Name "pat_9d92f6a");
      |];
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Name "enumerator");
          Token (Literal ",");
        ];
      );
      Opt (
        Alt [|
          Alt [|
            Token (Name "preproc_else_in_enumerator_list");
            Token (Name "preproc_elif_in_enumerator_list");
          |];
          Token (Name "preproc_elifdef_in_enumerator_list");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_ifdef_in_enumerator_list_no_comma",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_25b90ba");
        Token (Name "pat_9d92f6a");
      |];
      Token (Name "identifier");
      Repeat (
        Token (Name "enumerator");
      );
      Opt (
        Alt [|
          Alt [|
            Token (Name "preproc_else_in_enumerator_list_no_comma");
            Token (Name "preproc_elif_in_enumerator_list_no_comma");
          |];
          Token (Name "preproc_elifdef_in_enumerator_list_no_comma");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "preproc_ifdef_in_field_declaration_list",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_25b90ba");
        Token (Name "pat_9d92f6a");
      |];
      Token (Name "identifier");
      Repeat (
        Token (Name "field_declaration_list_item");
      );
      Opt (
        Alt [|
          Alt [|
            Token (Name "preproc_else_in_field_declaration_list");
            Token (Name "preproc_elif_in_field_declaration_list");
          |];
          Token (Name "preproc_elifdef_in_field_declaration_list");
        |];
      );
      Token (Name "pat_c46d1b2");
    ];
  );
  "qualified_field_identifier",
  Some (
    Seq [
      Token (Name "scope_resolution");
      Alt [|
        Token (Name "dependent_field_identifier");
        Token (Name "qualified_field_identifier");
        Token (Name "template_method");
        Alt [|
          Token (Name "identifier");
          Token (Name "semgrep_ellipsis");
        |];
      |];
    ];
  );
  "qualified_identifier",
  Some (
    Seq [
      Token (Name "scope_resolution");
      Alt [|
        Token (Name "dependent_identifier");
        Token (Name "qualified_identifier");
        Token (Name "template_function");
        Seq [
          Opt (
            Token (Literal "template");
          );
          Token (Name "identifier");
        ];
        Token (Name "operator_name");
        Token (Name "destructor_name");
        Token (Name "pointer_type_declarator");
      |];
    ];
  );
  "qualified_operator_cast_identifier",
  Some (
    Seq [
      Token (Name "scope_resolution");
      Alt [|
        Token (Name "qualified_operator_cast_identifier");
        Token (Name "operator_cast");
      |];
    ];
  );
  "qualified_type_identifier",
  Some (
    Seq [
      Token (Name "scope_resolution");
      Alt [|
        Token (Name "dependent_type_identifier");
        Token (Name "qualified_type_identifier");
        Token (Name "template_type");
        Token (Name "identifier");
      |];
    ];
  );
  "reference_declarator",
  Some (
    Seq [
      Alt [|
        Token (Literal "&");
        Token (Literal "&&");
      |];
      Token (Name "declarator");
    ];
  );
  "reference_field_declarator",
  Some (
    Seq [
      Alt [|
        Token (Literal "&");
        Token (Literal "&&");
      |];
      Token (Name "field_declarator");
    ];
  );
  "requirement",
  Some (
    Alt [|
      Token (Name "expression_statement");
      Token (Name "type_requirement");
      Token (Name "compound_requirement");
    |];
  );
  "requirement_clause_constraint",
  Some (
    Alt [|
      Token (Name "true");
      Token (Name "false");
      Token (Name "class_name");
      Token (Name "fold_expression");
      Token (Name "lambda_expression");
      Token (Name "requires_expression");
      Seq [
        Token (Literal "(");
        Token (Name "expression");
        Token (Literal ")");
      ];
      Token (Name "constraint_conjunction");
      Token (Name "constraint_disjunction");
    |];
  );
  "requirement_seq",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Token (Name "requirement");
      );
      Token (Literal "}");
    ];
  );
  "requires_clause",
  Some (
    Seq [
      Token (Literal "requires");
      Token (Name "requirement_clause_constraint");
    ];
  );
  "requires_expression",
  Some (
    Seq [
      Token (Literal "requires");
      Opt (
        Token (Name "requires_parameter_list");
      );
      Token (Name "requirement_seq");
    ];
  );
  "requires_parameter_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "parameter_declaration");
            Token (Name "optional_parameter_declaration");
            Token (Name "variadic_parameter_declaration");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "parameter_declaration");
                Token (Name "optional_parameter_declaration");
                Token (Name "variadic_parameter_declaration");
              |];
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "return_statement",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "return");
          Opt (
            Alt [|
              Token (Name "expression");
              Token (Name "comma_expression");
            |];
          );
          Token (Literal ";");
        ];
        Seq [
          Token (Literal "return");
          Token (Name "initializer_list");
          Token (Literal ";");
        ];
      |];
    ];
  );
  "scope_resolution",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Name "identifier");
          Token (Name "template_type");
          Token (Name "decltype");
          Token (Name "dependent_type_identifier");
        |];
      );
      Token (Literal "::");
    ];
  );
  "seh_except_clause",
  Some (
    Seq [
      Token (Literal "__except");
      Token (Name "parenthesized_expression");
      Token (Name "compound_statement");
    ];
  );
  "seh_finally_clause",
  Some (
    Seq [
      Token (Literal "__finally");
      Token (Name "compound_statement");
    ];
  );
  "seh_try_statement",
  Some (
    Seq [
      Token (Literal "__try");
      Token (Name "compound_statement");
      Alt [|
        Token (Name "seh_except_clause");
        Token (Name "seh_finally_clause");
      |];
    ];
  );
  "semgrep_typed_metavar",
  Some (
    Seq [
      Token (Name "type_descriptor");
      Token (Name "semgrep_metavar");
    ];
  );
  "sizeof_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "sizeof");
        Alt [|
          Token (Name "expression");
          Seq [
            Token (Literal "(");
            Token (Name "type_descriptor");
            Token (Literal ")");
          ];
        |];
      ];
      Seq [
        Token (Literal "sizeof");
        Token (Literal "...");
        Token (Literal "(");
        Token (Name "identifier");
        Token (Literal ")");
      ];
    |];
  );
  "static_assert_declaration",
  Some (
    Seq [
      Token (Literal "static_assert");
      Token (Literal "(");
      Token (Name "expression");
      Opt (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "string_literal");
            Token (Name "raw_string_literal");
            Token (Name "concatenated_string");
          |];
        ];
      );
      Token (Literal ")");
      Token (Literal ";");
    ];
  );
  "struct_specifier",
  Some (
    Seq [
      Token (Literal "struct");
      Token (Name "class_declaration");
    ];
  );
  "subscript_argument_list",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "initializer_list");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "expression");
                Token (Name "initializer_list");
              |];
            ];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "subscript_designator",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "subscript_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "subscript_argument_list");
    ];
  );
  "subscript_range_designator",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "...");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "switch_statement",
  Some (
    Seq [
      Token (Literal "switch");
      Token (Name "condition_clause");
      Token (Name "compound_statement");
    ];
  );
  "template_argument_list",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Seq [
          Alt [|
            Token (Name "type_descriptor");
            Token (Name "type_parameter_pack_expansion");
            Token (Name "expression");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "type_descriptor");
                Token (Name "type_parameter_pack_expansion");
                Token (Name "expression");
              |];
            ];
          );
        ];
      );
      Token (Name "tok_prec_p1_gt");
    ];
  );
  "template_declaration",
  Some (
    Seq [
      Token (Literal "template");
      Token (Name "template_parameter_list");
      Opt (
        Token (Name "requires_clause");
      );
      Alt [|
        Token (Name "empty_declaration");
        Token (Name "alias_declaration");
        Token (Name "declaration");
        Token (Name "template_declaration");
        Token (Name "function_definition");
        Token (Name "concept_definition");
        Token (Name "friend_declaration");
        Token (Name "constructor_or_destructor_declaration");
        Token (Name "constructor_or_destructor_definition");
        Token (Name "operator_cast_declaration");
        Token (Name "operator_cast_definition");
      |];
    ];
  );
  "template_function",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "template_argument_list");
    ];
  );
  "template_instantiation",
  Some (
    Seq [
      Token (Literal "template");
      Opt (
        Token (Name "declaration_specifiers");
      );
      Token (Name "declarator");
      Token (Literal ";");
    ];
  );
  "template_method",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "identifier");
          Token (Name "semgrep_ellipsis");
        |];
        Token (Name "operator_name");
      |];
      Token (Name "template_argument_list");
    ];
  );
  "template_parameter_list",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Seq [
          Alt [|
            Token (Name "parameter_declaration");
            Token (Name "optional_parameter_declaration");
            Token (Name "type_parameter_declaration");
            Token (Name "variadic_parameter_declaration");
            Token (Name "variadic_type_parameter_declaration");
            Token (Name "optional_type_parameter_declaration");
            Token (Name "template_template_parameter_declaration");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "parameter_declaration");
                Token (Name "optional_parameter_declaration");
                Token (Name "type_parameter_declaration");
                Token (Name "variadic_parameter_declaration");
                Token (Name "variadic_type_parameter_declaration");
                Token (Name "optional_type_parameter_declaration");
                Token (Name "template_template_parameter_declaration");
              |];
            ];
          );
        ];
      );
      Token (Name "tok_prec_p1_gt");
    ];
  );
  "template_template_parameter_declaration",
  Some (
    Seq [
      Token (Literal "template");
      Token (Name "template_parameter_list");
      Alt [|
        Token (Name "type_parameter_declaration");
        Token (Name "variadic_type_parameter_declaration");
        Token (Name "optional_type_parameter_declaration");
      |];
    ];
  );
  "template_type",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "template_argument_list");
    ];
  );
  "throw_specifier",
  Some (
    Seq [
      Token (Literal "throw");
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "type_descriptor");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "type_descriptor");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "throw_statement",
  Some (
    Seq [
      Token (Literal "throw");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
    ];
  );
  "trailing_return_type",
  Some (
    Seq [
      Token (Literal "->");
      Token (Name "type_descriptor");
    ];
  );
  "try_statement",
  Some (
    Seq [
      Token (Literal "try");
      Token (Name "compound_statement");
      Repeat1 (
        Token (Name "catch_clause");
      );
    ];
  );
  "type_declarator",
  Some (
    Alt [|
      Token (Name "attributed_type_declarator");
      Token (Name "pointer_type_declarator");
      Token (Name "function_type_declarator");
      Token (Name "array_type_declarator");
      Token (Name "parenthesized_type_declarator");
      Token (Name "identifier");
      Alt [|
        Token (Literal "signed");
        Token (Literal "unsigned");
        Token (Literal "long");
        Token (Literal "short");
      |];
      Token (Name "primitive_type");
    |];
  );
  "type_definition",
  Some (
    Seq [
      Opt (
        Token (Literal "__extension__");
      );
      Token (Literal "typedef");
      Token (Name "type_definition_type");
      Token (Name "type_definition_declarators");
      Repeat (
        Token (Name "attribute_specifier");
      );
      Token (Literal ";");
    ];
  );
  "type_definition_declarators",
  Some (
    Seq [
      Token (Name "type_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_declarator");
        ];
      );
    ];
  );
  "type_definition_type",
  Some (
    Seq [
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "type_specifier");
      Repeat (
        Token (Name "type_qualifier");
      );
    ];
  );
  "type_descriptor",
  Some (
    Seq [
      Repeat (
        Token (Name "type_qualifier");
      );
      Token (Name "type_specifier");
      Repeat (
        Token (Name "type_qualifier");
      );
      Opt (
        Token (Name "abstract_declarator");
      );
    ];
  );
  "type_parameter_pack_expansion",
  Some (
    Seq [
      Token (Name "type_descriptor");
      Token (Literal "...");
    ];
  );
  "type_requirement",
  Some (
    Seq [
      Token (Literal "typename");
      Token (Name "class_name");
    ];
  );
  "type_specifier",
  Some (
    Alt [|
      Token (Name "struct_specifier");
      Token (Name "union_specifier");
      Token (Name "enum_specifier");
      Token (Name "class_specifier");
      Token (Name "sized_type_specifier");
      Token (Name "primitive_type");
      Token (Name "template_type");
      Token (Name "dependent_type");
      Token (Name "placeholder_type_specifier");
      Token (Name "decltype");
      Alt [|
        Token (Name "qualified_type_identifier");
        Token (Name "identifier");
      |];
    |];
  );
  "unary_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Literal "!");
          Token (Literal "~");
          Token (Literal "-");
          Token (Literal "+");
        |];
        Token (Name "expression");
      ];
      Seq [
        Alt [|
          Token (Literal "not");
          Token (Literal "compl");
        |];
        Token (Name "expression");
      ];
    |];
  );
  "unary_left_fold",
  Some (
    Seq [
      Token (Literal "...");
      Token (Name "fold_operator");
      Token (Name "expression");
    ];
  );
  "unary_right_fold",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "fold_operator");
      Token (Literal "...");
    ];
  );
  "union_specifier",
  Some (
    Seq [
      Token (Literal "union");
      Token (Name "class_declaration");
    ];
  );
  "update_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Literal "--");
          Token (Literal "++");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "--");
          Token (Literal "++");
        |];
      ];
    |];
  );
  "using_declaration",
  Some (
    Seq [
      Token (Literal "using");
      Opt (
        Alt [|
          Token (Literal "namespace");
          Token (Literal "enum");
        |];
      );
      Alt [|
        Token (Name "identifier");
        Token (Name "qualified_identifier");
      |];
      Token (Literal ";");
    ];
  );
  "variadic_parameter_declaration",
  Some (
    Seq [
      Token (Name "declaration_specifiers");
      Alt [|
        Token (Name "variadic_declarator");
        Token (Name "variadic_reference_declarator");
      |];
    ];
  );
  "while_statement",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "condition_clause");
      Alt [|
        Token (Name "case_statement");
        Alt [|
          Alt [|
            Token (Name "attributed_statement");
            Token (Name "labeled_statement");
            Token (Name "compound_statement");
            Token (Name "expression_statement");
            Token (Name "if_statement");
            Token (Name "switch_statement");
            Token (Name "do_statement");
            Token (Name "while_statement");
            Token (Name "for_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "goto_statement");
            Token (Name "seh_try_statement");
            Token (Name "seh_leave_statement");
          |];
          Token (Name "co_return_statement");
          Token (Name "co_yield_statement");
          Token (Name "for_range_loop");
          Token (Name "try_statement");
          Token (Name "throw_statement");
        |];
      |];
    ];
  );
  "semgrep_expression",
  Some (
    Seq [
      Token (Literal "__SEMGREP_EXPRESSION");
      Token (Name "expression");
    ];
  );
  "top_level_expression_statement",
  Some (
    Seq [
      Token (Name "expression_not_binary");
      Token (Literal ";");
    ];
  );
  "translation_unit",
  Some (
    Alt [|
      Repeat (
        Alt [|
          Token (Name "function_definition");
          Token (Name "linkage_specification");
          Token (Name "declaration");
          Alt [|
            Alt [|
              Alt [|
                Token (Name "case_statement");
                Token (Name "attributed_statement");
                Token (Name "labeled_statement");
                Token (Name "compound_statement");
                Token (Name "top_level_expression_statement");
                Token (Name "if_statement");
                Token (Name "switch_statement");
                Token (Name "do_statement");
                Token (Name "while_statement");
                Token (Name "for_statement");
                Token (Name "return_statement");
                Token (Name "break_statement");
                Token (Name "continue_statement");
                Token (Name "goto_statement");
              |];
              Token (Name "co_return_statement");
              Token (Name "co_yield_statement");
              Token (Name "for_range_loop");
              Token (Name "try_statement");
              Token (Name "throw_statement");
            |];
            Token (Name "semgrep_ellipsis");
          |];
          Token (Name "attributed_statement");
          Token (Name "type_definition");
          Token (Name "empty_declaration");
          Token (Name "preproc_if");
          Token (Name "preproc_ifdef");
          Token (Name "preproc_include");
          Token (Name "preproc_def");
          Token (Name "preproc_function_def");
          Token (Name "preproc_call");
          Token (Name "namespace_definition");
          Token (Name "concept_definition");
          Token (Name "namespace_alias_definition");
          Token (Name "using_declaration");
          Token (Name "alias_declaration");
          Token (Name "static_assert_declaration");
          Token (Name "template_declaration");
          Token (Name "template_instantiation");
          Token (Name "constructor_or_destructor_definition");
          Token (Name "operator_cast_definition");
          Token (Name "operator_cast_declaration");
        |];
      );
      Token (Name "semgrep_expression");
    |];
  );
]

let trans_semgrep_metavar ((kind, body) : mt) : CST.semgrep_metavar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_virtual_ ((kind, body) : mt) : CST.virtual_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Virt (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_gnu_asm_qualifier ((kind, body) : mt) : CST.gnu_asm_qualifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Vola (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Inline (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Goto (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_imm_tok_pat_509ec78 ((kind, body) : mt) : CST.imm_tok_pat_509ec78 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ca8830e ((kind, body) : mt) : CST.pat_ca8830e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_this ((kind, body) : mt) : CST.this =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_56631e5 ((kind, body) : mt) : CST.pat_56631e5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_pat_c7f65b4 ((kind, body) : mt) : CST.imm_tok_prec_p1_pat_c7f65b4 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_default_method_clause ((kind, body) : mt) : CST.default_method_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_25b90ba ((kind, body) : mt) : CST.pat_25b90ba =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_ellipsis ((kind, body) : mt) : CST.semgrep_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_access_specifier ((kind, body) : mt) : CST.access_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Public (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Priv (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Prot (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_semgrep_named_ellipsis ((kind, body) : mt) : CST.semgrep_named_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_seh_leave_statement ((kind, body) : mt) : CST.seh_leave_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_auto ((kind, body) : mt) : CST.auto =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ref_qualifier ((kind, body) : mt) : CST.ref_qualifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `AMPAMP (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_9d92f6a ((kind, body) : mt) : CST.pat_9d92f6a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_preproc_directive ((kind, body) : mt) : CST.preproc_directive =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_storage_class_specifier ((kind, body) : mt) : CST.storage_class_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Extern (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Static (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Regi (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Inline (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `X___inline (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `X___inline__ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `X___forc (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Thread_local (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `X___thread (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_qualifier ((kind, body) : mt) : CST.type_qualifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_const (
            (match v with
            | Alt (0, v) ->
                `Const (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Cons (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Vola (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Rest (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `X___rest__ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `X___exte__ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `X__Atomic (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `X__Nore (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Nore (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Muta (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Cons_36fe86c (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cons_a25342f (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_virtual_specifier ((kind, body) : mt) : CST.virtual_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Final (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Over (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_delete_method_clause ((kind, body) : mt) : CST.delete_method_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_arg ((kind, body) : mt) : CST.preproc_arg =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_lambda_default_capture ((kind, body) : mt) : CST.lambda_default_capture =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `EQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_tok_prec_p1_gt ((kind, body) : mt) : CST.tok_prec_p1_gt =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ms_unaligned_ptr_modifier ((kind, body) : mt) : CST.ms_unaligned_ptr_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `X__unal (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `X___unal (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_3df6e71 ((kind, body) : mt) : CST.pat_3df6e71 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c3ea183 ((kind, body) : mt) : CST.pat_c3ea183 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_bfeb4bb ((kind, body) : mt) : CST.pat_bfeb4bb =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ms_restrict_modifier ((kind, body) : mt) : CST.ms_restrict_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c46d1b2 ((kind, body) : mt) : CST.pat_c46d1b2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a6d4183 ((kind, body) : mt) : CST.pat_a6d4183 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_raw_string_delimiter ((kind, body) : mt) : CST.raw_string_delimiter =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number_literal ((kind, body) : mt) : CST.number_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lpar ((kind, body) : mt) : CST.imm_tok_lpar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_0307ca2 ((kind, body) : mt) : CST.pat_0307ca2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_null ((kind, body) : mt) : CST.null =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `NULL (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Null (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_raw_string_content ((kind, body) : mt) : CST.raw_string_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_primitive_type ((kind, body) : mt) : CST.primitive_type =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_literal_suffix ((kind, body) : mt) : CST.literal_suffix =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ms_unsigned_ptr_modifier ((kind, body) : mt) : CST.ms_unsigned_ptr_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_continue_statement ((kind, body) : mt) : CST.continue_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ms_signed_ptr_modifier ((kind, body) : mt) : CST.ms_signed_ptr_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_system_lib_string ((kind, body) : mt) : CST.system_lib_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ms_call_modifier ((kind, body) : mt) : CST.ms_call_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `X___cdecl (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `X___clrc (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `X___stdc (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `X___fast (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `X___this (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `X___vect (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_imm_tok_pat_36637e2 ((kind, body) : mt) : CST.imm_tok_pat_36637e2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_fold_operator ((kind, body) : mt) : CST.fold_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `PLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `DASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `STAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `SLASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `PERC (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `HAT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `BAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `EQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `LT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `GT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `LTLT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `GTGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `PLUSEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `DASHEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `STAREQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `SLASHEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `PERCEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `HATEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `AMPEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `BAREQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `GTGTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `LTLTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (23, v) ->
          `EQEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (24, v) ->
          `BANGEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (25, v) ->
          `LTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (26, v) ->
          `GTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (27, v) ->
          `AMPAMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (28, v) ->
          `BARBAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (29, v) ->
          `COMMA (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (30, v) ->
          `DOTSTAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (31, v) ->
          `DASHGTSTAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (32, v) ->
          `Or (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (33, v) ->
          `And (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (34, v) ->
          `Bitor (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (35, v) ->
          `Xor (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (36, v) ->
          `Bitand (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (37, v) ->
          `Not_eq (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_literal ((kind, body) : mt) : CST.string_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LDQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `UDQUOT_c163aae (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `UDQUOT_df3447d (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `U8DQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `DQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_prec_p1_pat_c7f65b4 (
                      trans_imm_tok_prec_p1_pat_c7f65b4 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_decltype_auto ((kind, body) : mt) : CST.decltype_auto =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_auto (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_call ((kind, body) : mt) : CST.preproc_call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_preproc_directive (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_preproc_arg (Run.matcher_token v))
              v1
            ,
            trans_imm_tok_pat_509ec78 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field_designator ((kind, body) : mt) : CST.field_designator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_ellips (
                  trans_semgrep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_operator_name ((kind, body) : mt) : CST.operator_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Co_await (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `SLASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `PERC (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `HAT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `BAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `LT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `GT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (20, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (21, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (22, v) ->
                `LTLT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (23, v) ->
                `GTGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (24, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (25, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (26, v) ->
                `EQEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (27, v) ->
                `BANGEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (28, v) ->
                `LTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (29, v) ->
                `GTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (30, v) ->
                `LTEQGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (31, v) ->
                `AMPAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (32, v) ->
                `BARBAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (33, v) ->
                `PLUSPLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (34, v) ->
                `DASHDASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (35, v) ->
                `COMMA (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (36, v) ->
                `DASHGTSTAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (37, v) ->
                `DASHGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (38, v) ->
                `LPARRPAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (39, v) ->
                `LBRACKRBRACK (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (40, v) ->
                `Xor (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (41, v) ->
                `Bitand (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (42, v) ->
                `Bitor (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (43, v) ->
                `Compl (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (44, v) ->
                `Not (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (45, v) ->
                `Xor_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (46, v) ->
                `And_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (47, v) ->
                `Or_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (48, v) ->
                `Not_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (49, v) ->
                `And (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (50, v) ->
                `Or (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (51, v) ->
                `Choice_new_opt_LBRACKRBRACK (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `New (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Delete (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (52, v) ->
                `DQUOTDQUOT_id (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_identifier (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_variadic_type_parameter_declaration ((kind, body) : mt) : CST.variadic_type_parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Type (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Class (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_destructor_name ((kind, body) : mt) : CST.destructor_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_ms_declspec_modifier ((kind, body) : mt) : CST.ms_declspec_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_variadic_declarator ((kind, body) : mt) : CST.variadic_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_goto_statement ((kind, body) : mt) : CST.goto_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_preproc_defined ((kind, body) : mt) : CST.preproc_defined =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Defi_LPAR_id_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Defi_id (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_identifier (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_structured_binding_declarator ((kind, body) : mt) : CST.structured_binding_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_gnu_asm_goto_list ((kind, body) : mt) : CST.gnu_asm_goto_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_identifier (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_identifier (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_specifier ((kind, body) : mt) : CST.namespace_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_parameter_declaration ((kind, body) : mt) : CST.type_parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Type (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Class (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_def ((kind, body) : mt) : CST.preproc_def =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_c3ea183 (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_preproc_arg (Run.matcher_token v))
              v2
            ,
            trans_imm_tok_pat_509ec78 (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_preproc_params ((kind, body) : mt) : CST.preproc_params =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_imm_tok_lpar (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `DOTDOTDOT (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Id (
                                      trans_identifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `DOTDOTDOT (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_raw_string_literal ((kind, body) : mt) : CST.raw_string_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `RDQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LRDQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `URDQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `URDQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `U8RDQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Raw_str_deli_LPAR_raw_str_content_RPAR_raw_str_deli (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        trans_raw_string_delimiter (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_raw_string_content (Run.matcher_token v2),
                        Run.trans_token (Run.matcher_token v3),
                        trans_raw_string_delimiter (Run.matcher_token v4)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LPAR_raw_str_content_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_raw_string_content (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_sized_type_specifier ((kind, body) : mt) : CST.sized_type_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep_choice_signed_opt_choice_id_rep1_choice_signed (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Signed (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unsi (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Long (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Short (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Prim_type (
                            trans_primitive_type (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.repeat1
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Signed (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unsi (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Long (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Short (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Rep1_choice_signed_opt_choice_id_rep_choice_signed (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.repeat1
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Signed (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unsi (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Long (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Short (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Prim_type (
                            trans_primitive_type (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Signed (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unsi (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Long (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Short (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ms_pointer_modifier ((kind, body) : mt) : CST.ms_pointer_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Ms_unal_ptr_modi (
            trans_ms_unaligned_ptr_modifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Ms_rest_modi (
            trans_ms_restrict_modifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Ms_unsi_ptr_modi (
            trans_ms_unsigned_ptr_modifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Ms_signed_ptr_modi (
            trans_ms_signed_ptr_modifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_char_literal ((kind, body) : mt) : CST.char_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LSQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `USQUOT_d861d39 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `USQUOT_2701bdc (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `U8SQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `SQUOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Imm_tok_pat_36637e2 (
                      trans_imm_tok_pat_36637e2 (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_binary_fold_operator ((kind, body) : mt) : CST.binary_fold_operator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_fold_operator (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_fold_operator (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_gnu_asm_output_operand ((kind, body) : mt) : CST.gnu_asm_output_operand =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_string_literal (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_gnu_asm_clobber_list ((kind, body) : mt) : CST.gnu_asm_clobber_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_string_literal (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_string_literal (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_variadic_reference_declarator ((kind, body) : mt) : CST.variadic_reference_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `AMPAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_variadic_declarator (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_nested_namespace_specifier ((kind, body) : mt) : CST.nested_namespace_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_namespace_specifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Nested_name_spec (
                  trans_nested_namespace_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Name_spec (
                  trans_namespace_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_function_def ((kind, body) : mt) : CST.preproc_function_def =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_c3ea183 (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            trans_preproc_params (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_preproc_arg (Run.matcher_token v))
              v3
            ,
            trans_imm_tok_pat_509ec78 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_concatenated_string ((kind, body) : mt) : CST.concatenated_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Str_lit (
                  trans_string_literal (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Raw_str_lit (
                  trans_raw_string_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Str_lit (
                  trans_string_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Raw_str_lit (
                  trans_raw_string_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Id (
                      trans_identifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Str_lit (
                      trans_string_literal (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Raw_str_lit (
                      trans_raw_string_literal (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_preproc_argument_list ((kind, body) : mt) : CST.preproc_argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_preproc_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_preproc_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_binary_expression ((kind, body) : mt) : CST.preproc_binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Prep_exp_PLUS_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Prep_exp_DASH_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Prep_exp_STAR_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Prep_exp_SLASH_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Prep_exp_PERC_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Prep_exp_BARBAR_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Prep_exp_AMPAMP_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Prep_exp_BAR_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Prep_exp_HAT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Prep_exp_AMP_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Prep_exp_EQEQ_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Prep_exp_BANGEQ_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Prep_exp_GT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Prep_exp_GTEQ_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Prep_exp_LTEQ_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Prep_exp_LT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Prep_exp_LTLT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Prep_exp_GTGT_prep_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_preproc_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_preproc_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_call_expression ((kind, body) : mt) : CST.preproc_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_preproc_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_expression ((kind, body) : mt) : CST.preproc_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prep_call_exp (
            trans_preproc_call_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Num_lit (
            trans_number_literal (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Char_lit (
            trans_char_literal (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Prep_defi (
            trans_preproc_defined (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Prep_un_exp (
            trans_preproc_unary_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Prep_bin_exp (
            trans_preproc_binary_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Prep_paren_exp (
            trans_preproc_parenthesized_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_parenthesized_expression ((kind, body) : mt) : CST.preproc_parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_unary_expression ((kind, body) : mt) : CST.preproc_unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_preproc_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_gnu_asm_output_operand_list ((kind, body) : mt) : CST.gnu_asm_output_operand_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_gnu_asm_output_operand (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_gnu_asm_output_operand (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_alias_definition ((kind, body) : mt) : CST.namespace_alias_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Nested_name_spec (
                  trans_nested_namespace_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_user_defined_literal ((kind, body) : mt) : CST.user_defined_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Num_lit (
                  trans_number_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Char_lit (
                  trans_char_literal (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Str_lit (
                  trans_string_literal (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Raw_str_lit (
                  trans_raw_string_literal (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Conc_str (
                  trans_concatenated_string (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_literal_suffix (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_preproc_include ((kind, body) : mt) : CST.preproc_include =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_ca8830e (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Str_lit (
                  trans_string_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `System_lib_str (
                  trans_system_lib_string (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Prep_call_exp (
                  trans_preproc_call_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_imm_tok_pat_509ec78 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_abstract_array_declarator ((kind, body) : mt) : CST.abstract_array_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_declarator ((kind, body) : mt) : CST.abstract_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_abst_poin_decl (
            (match v with
            | Alt (0, v) ->
                `Abst_poin_decl (
                  trans_abstract_pointer_declarator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Abst_func_decl (
                  trans_abstract_function_declarator (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Abst_array_decl (
                  trans_abstract_array_declarator (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Abst_paren_decl (
                  trans_abstract_parenthesized_declarator (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Abst_ref_decl (
            trans_abstract_reference_declarator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_function_declarator ((kind, body) : mt) : CST.abstract_function_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v0
            ,
            trans_function_declarator_seq (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_parenthesized_declarator ((kind, body) : mt) : CST.abstract_parenthesized_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_abstract_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_pointer_declarator ((kind, body) : mt) : CST.abstract_pointer_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_reference_declarator ((kind, body) : mt) : CST.abstract_reference_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `AMPAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_alias_declaration ((kind, body) : mt) : CST.alias_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_attribute_declaration (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_type_descriptor (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_alignas_specifier ((kind, body) : mt) : CST.alignas_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prim_type (
                  trans_primitive_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_alignof_expression ((kind, body) : mt) : CST.alignof_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `X___alig__ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `X___alig (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `X__alig (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Alig (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `X__Alig (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_descriptor (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument_list ((kind, body) : mt) : CST.argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Opt___exte___exp (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.opt
                                    (fun v -> Run.trans_token (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_expression (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Init_list (
                            trans_initializer_list (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Comp_stmt (
                            trans_compound_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Opt___exte___exp (
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.opt
                                              (fun v -> Run.trans_token (Run.matcher_token v))
                                              v0
                                            ,
                                            trans_expression (Run.matcher_token v1)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | Alt (1, v) ->
                                    `Init_list (
                                      trans_initializer_list (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Comp_stmt (
                                      trans_compound_statement (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_declarator ((kind, body) : mt) : CST.array_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_declarator (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_field_declarator ((kind, body) : mt) : CST.array_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_field_declarator (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_type_declarator ((kind, body) : mt) : CST.array_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_type_declarator (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression ((kind, body) : mt) : CST.assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_id (
                  (match v with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Field_exp (
                        trans_field_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Poin_exp (
                        trans_pointer_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Paren_exp (
                        trans_parenthesized_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `User_defi_lit (
                  trans_user_defined_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `And_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Or_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Xor_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Init_list (
                  trans_initializer_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression_lhs_expression ((kind, body) : mt) : CST.assignment_expression_lhs_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `And_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Or_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Xor_eq (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Init_list (
                  trans_initializer_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute ((kind, body) : mt) : CST.attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_identifier (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_argument_list (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_declaration ((kind, body) : mt) : CST.attribute_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_attribute (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_specifier ((kind, body) : mt) : CST.attribute_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_argument_list (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attributed_declarator ((kind, body) : mt) : CST.attributed_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_declarator (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_attribute_declaration (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attributed_field_declarator ((kind, body) : mt) : CST.attributed_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_field_declarator (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_attribute_declaration (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attributed_statement ((kind, body) : mt) : CST.attributed_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat1
              (fun v -> trans_attribute_declaration (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_attr_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_attr_stmt (
                        (match v with
                        | Alt (0, v) ->
                            `Attr_stmt (
                              trans_attributed_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Labe_stmt (
                              trans_labeled_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Seh_try_stmt (
                              trans_seh_try_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Seh_leave_stmt (
                              trans_seh_leave_statement (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Co_ret_stmt (
                        trans_co_return_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Co_yield_stmt (
                        trans_co_yield_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `For_range_loop (
                        trans_for_range_loop (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Throw_stmt (
                        trans_throw_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attributed_type_declarator ((kind, body) : mt) : CST.attributed_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_declarator (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_attribute_declaration (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_base_class_clause ((kind, body) : mt) : CST.base_class_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_attribute_declaration (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Access_spec (
                      trans_access_specifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Access_spec_virt (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_access_specifier (Run.matcher_token v0),
                            trans_virtual_ (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (2, v) ->
                    `Virt_access_spec (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_virtual_ (Run.matcher_token v0),
                            trans_access_specifier (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_class_name (Run.matcher_token v3),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3; v4] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.repeat
                        (fun v -> trans_attribute_declaration (Run.matcher_token v))
                        v1
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Access_spec (
                                trans_access_specifier (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Access_spec_virt (
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_access_specifier (Run.matcher_token v0),
                                      trans_virtual_ (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                          | Alt (2, v) ->
                              `Virt_access_spec (
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      trans_virtual_ (Run.matcher_token v0),
                                      trans_access_specifier (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      trans_class_name (Run.matcher_token v3),
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v4
                    )
                | _ -> assert false
                )
              )
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_DASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_SLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_PERC_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_BANGEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_GT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_GTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_LTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_GTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (18, v) ->
          `Exp_LTEQGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (19, v) ->
          `Exp_or_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (20, v) ->
          `Exp_and_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (21, v) ->
          `Exp_bitor_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (22, v) ->
          `Exp_xor_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (23, v) ->
          `Exp_bitand_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (24, v) ->
          `Exp_not_eq_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_fold ((kind, body) : mt) : CST.binary_fold =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_binary_fold_operator (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bitfield_clause ((kind, body) : mt) : CST.bitfield_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_arg_list (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  trans_argument_list (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Prim_type_arg_list (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_primitive_type (Run.matcher_token v0),
                  trans_argument_list (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_statement ((kind, body) : mt) : CST.case_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Case_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Defa (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_choice_attr_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Choice_attr_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Attr_stmt (
                                  trans_attributed_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Labe_stmt (
                                  trans_labeled_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Comp_stmt (
                                  trans_compound_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Exp_stmt (
                                  trans_expression_statement (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `If_stmt (
                                  trans_if_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Switch_stmt (
                                  trans_switch_statement (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `Do_stmt (
                                  trans_do_statement (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `While_stmt (
                                  trans_while_statement (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `For_stmt (
                                  trans_for_statement (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Ret_stmt (
                                  trans_return_statement (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Brk_stmt (
                                  trans_break_statement (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Cont_stmt (
                                  trans_continue_statement (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `Goto_stmt (
                                  trans_goto_statement (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `Seh_try_stmt (
                                  trans_seh_try_statement (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `Seh_leave_stmt (
                                  trans_seh_leave_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Co_ret_stmt (
                            trans_co_return_statement (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Co_yield_stmt (
                            trans_co_yield_statement (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `For_range_loop (
                            trans_for_range_loop (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Try_stmt (
                            trans_try_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Throw_stmt (
                            trans_throw_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cast_expression ((kind, body) : mt) : CST.cast_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_descriptor (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_clause ((kind, body) : mt) : CST.catch_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1),
            trans_compound_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_declaration ((kind, body) : mt) : CST.class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Attr_spec (
                      trans_attribute_specifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Alignas_spec (
                      trans_alignas_specifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.opt
              (fun v -> trans_ms_declspec_modifier (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v -> trans_attribute_declaration (Run.matcher_token v))
              v2
            ,
            trans_class_declaration_item (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_declaration_item ((kind, body) : mt) : CST.class_declaration_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Class_name (
                  trans_class_name (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Opt_class_name_opt_virt_spec_opt_base_class_clause_field_decl_list (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.opt
                          (fun v -> trans_class_name (Run.matcher_token v))
                          v0
                        ,
                        Run.opt
                          (fun v -> trans_virtual_specifier (Run.matcher_token v))
                          v1
                        ,
                        Run.opt
                          (fun v -> trans_base_class_clause (Run.matcher_token v))
                          v2
                        ,
                        trans_field_declaration_list (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_attribute_specifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_name ((kind, body) : mt) : CST.class_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Temp_type (
            trans_template_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Qual_type_id (
            trans_qualified_type_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_specifier ((kind, body) : mt) : CST.class_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_class_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_co_await_expression ((kind, body) : mt) : CST.co_await_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_co_return_statement ((kind, body) : mt) : CST.co_return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_co_yield_statement ((kind, body) : mt) : CST.co_yield_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_comma_expression ((kind, body) : mt) : CST.comma_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comma_exp (
                  trans_comma_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_literal_expression ((kind, body) : mt) : CST.compound_literal_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_type_desc_RPAR_init_list (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_type_descriptor (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  trans_initializer_list (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_class_name_init_list (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Class_name (
                        trans_class_name (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Prim_type (
                        trans_primitive_type (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_initializer_list (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_requirement ((kind, body) : mt) : CST.compound_requirement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_trailing_return_type (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_statement ((kind, body) : mt) : CST.compound_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_defi (
                      (match v with
                      | Alt (0, v) ->
                          `Func_defi (
                            trans_function_definition (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Link_spec (
                            trans_linkage_specification (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Decl (
                            trans_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_case_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Case_stmt (
                                  trans_case_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_attr_stmt (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_attr_stmt (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Attr_stmt (
                                              trans_attributed_statement (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Labe_stmt (
                                              trans_labeled_statement (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Comp_stmt (
                                              trans_compound_statement (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Exp_stmt (
                                              trans_expression_statement (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `If_stmt (
                                              trans_if_statement (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Switch_stmt (
                                              trans_switch_statement (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `Do_stmt (
                                              trans_do_statement (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `While_stmt (
                                              trans_while_statement (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `For_stmt (
                                              trans_for_statement (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `Ret_stmt (
                                              trans_return_statement (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Brk_stmt (
                                              trans_break_statement (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Cont_stmt (
                                              trans_continue_statement (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `Goto_stmt (
                                              trans_goto_statement (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `Seh_try_stmt (
                                              trans_seh_try_statement (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Seh_leave_stmt (
                                              trans_seh_leave_statement (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Co_ret_stmt (
                                        trans_co_return_statement (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Co_yield_stmt (
                                        trans_co_yield_statement (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `For_range_loop (
                                        trans_for_range_loop (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Try_stmt (
                                        trans_try_statement (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Throw_stmt (
                                        trans_throw_statement (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (4, v) ->
                          `Attr_stmt (
                            trans_attributed_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Type_defi (
                            trans_type_definition (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Empty_decl (
                            trans_empty_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Prep_if (
                            trans_preproc_if (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Prep_ifdef (
                            trans_preproc_ifdef (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Prep_incl (
                            trans_preproc_include (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Prep_def (
                            trans_preproc_def (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Prep_func_def (
                            trans_preproc_function_def (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Prep_call (
                            trans_preproc_call (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Name_defi (
                            trans_namespace_definition (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Conc_defi (
                            trans_concept_definition (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Name_alias_defi (
                            trans_namespace_alias_definition (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Using_decl (
                            trans_using_declaration (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Static_assert_decl (
                            trans_static_assert_declaration (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Temp_decl (
                            trans_template_declaration (Run.matcher_token v)
                          )
                      | Alt (20, v) ->
                          `Temp_inst (
                            trans_template_instantiation (Run.matcher_token v)
                          )
                      | Alt (21, v) ->
                          `Cons_or_dest_defi (
                            trans_constructor_or_destructor_definition (Run.matcher_token v)
                          )
                      | Alt (22, v) ->
                          `Op_cast_defi (
                            trans_operator_cast_definition (Run.matcher_token v)
                          )
                      | Alt (23, v) ->
                          `Op_cast_decl (
                            trans_operator_cast_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Semg_ellips (
                      trans_semgrep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_concept_definition ((kind, body) : mt) : CST.concept_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_condition_clause ((kind, body) : mt) : CST.condition_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_init_statement (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comma_exp (
                  trans_comma_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cond_decl (
                  trans_condition_declaration (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_condition_declaration ((kind, body) : mt) : CST.condition_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            trans_declarator (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `EQ_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Init_list (
                  trans_initializer_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conditional_expression ((kind, body) : mt) : CST.conditional_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constraint_conjunction ((kind, body) : mt) : CST.constraint_conjunction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_requirement_clause_constraint (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `AMPAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `And (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_requirement_clause_constraint (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constraint_disjunction ((kind, body) : mt) : CST.constraint_disjunction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_requirement_clause_constraint (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `BARBAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Or (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_requirement_clause_constraint (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_or_destructor_declaration ((kind, body) : mt) : CST.constructor_or_destructor_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v ->
                trans_constructor_specifiers (Run.matcher_token v)
              )
              v0
            ,
            trans_function_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_or_destructor_definition ((kind, body) : mt) : CST.constructor_or_destructor_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v ->
                trans_constructor_specifiers (Run.matcher_token v)
              )
              v0
            ,
            trans_function_declarator (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Opt_field_init_list_comp_stmt (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v ->
                            trans_field_initializer_list (Run.matcher_token v)
                          )
                          v0
                        ,
                        trans_compound_statement (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Cons_try_stmt (
                  trans_constructor_try_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Defa_meth_clause (
                  trans_default_method_clause (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Delete_meth_clause (
                  trans_delete_method_clause (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_specifiers ((kind, body) : mt) : CST.constructor_specifiers =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Decl_modifs (
            trans_declaration_modifiers (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Expl_func_spec (
            trans_explicit_function_specifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_try_statement ((kind, body) : mt) : CST.constructor_try_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_field_initializer_list (Run.matcher_token v)
              )
              v1
            ,
            trans_compound_statement (Run.matcher_token v2),
            Run.repeat1
              (fun v -> trans_catch_clause (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration ((kind, body) : mt) : CST.declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            trans_declaration_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_declarator ((kind, body) : mt) : CST.declaration_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Decl_opt_gnu_asm_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_declarator (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_gnu_asm_expression (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Init_decl (
                  trans_init_declarator (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Decl_opt_gnu_asm_exp (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_declarator (Run.matcher_token v0),
                                  Run.opt
                                    (fun v -> trans_gnu_asm_expression (Run.matcher_token v))
                                    v1
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Init_decl (
                            trans_init_declarator (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_list ((kind, body) : mt) : CST.declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_defi (
                      (match v with
                      | Alt (0, v) ->
                          `Func_defi (
                            trans_function_definition (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Link_spec (
                            trans_linkage_specification (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Decl (
                            trans_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_case_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Case_stmt (
                                  trans_case_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_attr_stmt (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_attr_stmt (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Attr_stmt (
                                              trans_attributed_statement (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Labe_stmt (
                                              trans_labeled_statement (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Comp_stmt (
                                              trans_compound_statement (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Exp_stmt (
                                              trans_expression_statement (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `If_stmt (
                                              trans_if_statement (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Switch_stmt (
                                              trans_switch_statement (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `Do_stmt (
                                              trans_do_statement (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `While_stmt (
                                              trans_while_statement (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `For_stmt (
                                              trans_for_statement (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `Ret_stmt (
                                              trans_return_statement (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Brk_stmt (
                                              trans_break_statement (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Cont_stmt (
                                              trans_continue_statement (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `Goto_stmt (
                                              trans_goto_statement (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `Seh_try_stmt (
                                              trans_seh_try_statement (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Seh_leave_stmt (
                                              trans_seh_leave_statement (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Co_ret_stmt (
                                        trans_co_return_statement (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Co_yield_stmt (
                                        trans_co_yield_statement (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `For_range_loop (
                                        trans_for_range_loop (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Try_stmt (
                                        trans_try_statement (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Throw_stmt (
                                        trans_throw_statement (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (4, v) ->
                          `Attr_stmt (
                            trans_attributed_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Type_defi (
                            trans_type_definition (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Empty_decl (
                            trans_empty_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Prep_if (
                            trans_preproc_if (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Prep_ifdef (
                            trans_preproc_ifdef (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Prep_incl (
                            trans_preproc_include (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Prep_def (
                            trans_preproc_def (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Prep_func_def (
                            trans_preproc_function_def (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Prep_call (
                            trans_preproc_call (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Name_defi (
                            trans_namespace_definition (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Conc_defi (
                            trans_concept_definition (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Name_alias_defi (
                            trans_namespace_alias_definition (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Using_decl (
                            trans_using_declaration (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Static_assert_decl (
                            trans_static_assert_declaration (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Temp_decl (
                            trans_template_declaration (Run.matcher_token v)
                          )
                      | Alt (20, v) ->
                          `Temp_inst (
                            trans_template_instantiation (Run.matcher_token v)
                          )
                      | Alt (21, v) ->
                          `Cons_or_dest_defi (
                            trans_constructor_or_destructor_definition (Run.matcher_token v)
                          )
                      | Alt (22, v) ->
                          `Op_cast_defi (
                            trans_operator_cast_definition (Run.matcher_token v)
                          )
                      | Alt (23, v) ->
                          `Op_cast_decl (
                            trans_operator_cast_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Semg_ellips (
                      trans_semgrep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_modifiers ((kind, body) : mt) : CST.declaration_modifiers =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_stor_class_spec (
            (match v with
            | Alt (0, v) ->
                `Stor_class_spec (
                  trans_storage_class_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_qual (
                  trans_type_qualifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Attr_spec (
                  trans_attribute_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Attr_decl (
                  trans_attribute_declaration (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Ms_decl_modi (
                  trans_ms_declspec_modifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Virt (
            trans_virtual_ (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Alignas_spec (
            trans_alignas_specifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_specifiers ((kind, body) : mt) : CST.declaration_specifiers =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v -> trans_declaration_modifiers (Run.matcher_token v))
              v0
            ,
            trans_type_specifier (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_declaration_modifiers (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declarator ((kind, body) : mt) : CST.declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_attr_decl (
            (match v with
            | Alt (0, v) ->
                `Attr_decl (
                  trans_attributed_declarator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Poin_decl (
                  trans_pointer_declarator (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Func_decl (
                  trans_function_declarator (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Array_decl (
                  trans_array_declarator (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Paren_decl (
                  trans_parenthesized_declarator (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ref_decl (
            trans_reference_declarator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Qual_id (
            trans_qualified_identifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Temp_func (
            trans_template_function (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Op_name (
            trans_operator_name (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Dest_name (
            trans_destructor_name (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Stru_bind_decl (
            trans_structured_binding_declarator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_decltype ((kind, body) : mt) : CST.decltype =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_deep_ellipsis ((kind, body) : mt) : CST.deep_ellipsis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_delete_expression ((kind, body) : mt) : CST.delete_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dependent_field_identifier ((kind, body) : mt) : CST.dependent_field_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_template_method (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dependent_identifier ((kind, body) : mt) : CST.dependent_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_template_function (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dependent_type ((kind, body) : mt) : CST.dependent_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_specifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dependent_type_identifier ((kind, body) : mt) : CST.dependent_type_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_template_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_attr_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_attr_stmt (
                        (match v with
                        | Alt (0, v) ->
                            `Attr_stmt (
                              trans_attributed_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Labe_stmt (
                              trans_labeled_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Seh_try_stmt (
                              trans_seh_try_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Seh_leave_stmt (
                              trans_seh_leave_statement (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Co_ret_stmt (
                        trans_co_return_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Co_yield_stmt (
                        trans_co_yield_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `For_range_loop (
                        trans_for_range_loop (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Throw_stmt (
                        trans_throw_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_parenthesized_expression (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_clause ((kind, body) : mt) : CST.else_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_attr_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_attr_stmt (
                        (match v with
                        | Alt (0, v) ->
                            `Attr_stmt (
                              trans_attributed_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Labe_stmt (
                              trans_labeled_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Seh_try_stmt (
                              trans_seh_try_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Seh_leave_stmt (
                              trans_seh_leave_statement (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Co_ret_stmt (
                        trans_co_return_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Co_yield_stmt (
                        trans_co_yield_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `For_range_loop (
                        trans_for_range_loop (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Throw_stmt (
                        trans_throw_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_empty_declaration ((kind, body) : mt) : CST.empty_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_specifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_base_clause ((kind, body) : mt) : CST.enum_base_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Qual_type_id (
                  trans_qualified_type_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Prim_type (
                  trans_primitive_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Sized_type_spec (
                  trans_sized_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_specifier ((kind, body) : mt) : CST.enum_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Class (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Struct (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Class_name_opt_enum_base_clause_opt_enum_list (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_class_name (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_enum_base_clause (Run.matcher_token v))
                          v1
                        ,
                        Run.opt
                          (fun v -> trans_enumerator_list (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Enum_list (
                  trans_enumerator_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_attribute_specifier (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enumerator ((kind, body) : mt) : CST.enumerator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enumerator_list ((kind, body) : mt) : CST.enumerator_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Enum_COMMA (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_enumerator (Run.matcher_token v0),
                            Run.trans_token (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Prep_if_in_enum_list (
                      trans_preproc_if_in_enumerator_list (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Prep_ifdef_in_enum_list (
                      trans_preproc_ifdef_in_enumerator_list (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Prep_call_COMMA (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_preproc_call (Run.matcher_token v0),
                            Run.trans_token (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Enum (
                            trans_enumerator (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Prep_if_in_enum_list_no_comma (
                            trans_preproc_if_in_enumerator_list_no_comma (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Prep_ifdef_in_enum_list_no_comma (
                            trans_preproc_ifdef_in_enumerator_list_no_comma (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Prep_call (
                            trans_preproc_call (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_explicit_function_specifier ((kind, body) : mt) : CST.explicit_function_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Expl (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Expl_LPAR_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_exp_not_bin (
            (match v with
            | Alt (0, v) ->
                `Exp_not_bin (
                  trans_expression_not_binary (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Deep_ellips (
            trans_deep_ellipsis (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Semg_named_ellips (
            trans_semgrep_named_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_not_binary ((kind, body) : mt) : CST.expression_not_binary =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_cond_exp (
            (match v with
            | Alt (0, v) ->
                `Cond_exp (
                  trans_conditional_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Assign_exp (
                  trans_assignment_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Update_exp (
                  trans_update_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Cast_exp (
                  trans_cast_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Poin_exp (
                  trans_pointer_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Sizeof_exp (
                  trans_sizeof_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Alig_exp (
                  trans_alignof_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Offs_exp (
                  trans_offsetof_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Gene_exp (
                  trans_generic_expression (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Subs_exp (
                  trans_subscript_expression (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Field_exp (
                  trans_field_expression (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Comp_lit_exp (
                  trans_compound_literal_expression (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Num_lit (
                  trans_number_literal (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Str_lit (
                  trans_string_literal (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `True (
                  trans_true_ (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `False (
                  trans_false_ (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Null (
                  trans_null (Run.matcher_token v)
                )
            | Alt (20, v) ->
                `Conc_str (
                  trans_concatenated_string (Run.matcher_token v)
                )
            | Alt (21, v) ->
                `Char_lit (
                  trans_char_literal (Run.matcher_token v)
                )
            | Alt (22, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | Alt (23, v) ->
                `Gnu_asm_exp (
                  trans_gnu_asm_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Co_await_exp (
            trans_co_await_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Requis_exp (
            trans_requires_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Requis_clause (
            trans_requires_clause (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Temp_func (
            trans_template_function (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Qual_id (
            trans_qualified_identifier (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `New_exp (
            trans_new_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Delete_exp (
            trans_delete_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Lambda_exp (
            trans_lambda_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Param_pack_expa (
            trans_parameter_pack_expansion (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `This (
            trans_this (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Raw_str_lit (
            trans_raw_string_literal (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `User_defi_lit (
            trans_user_defined_literal (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Fold_exp (
            trans_fold_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_statement ((kind, body) : mt) : CST.expression_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comma_exp (
                      trans_comma_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration ((kind, body) : mt) : CST.field_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_field_declarator (Run.matcher_token v0),
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Bitf_clause (
                                trans_bitfield_clause (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Init_list (
                                trans_initializer_list (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `EQ_choice_exp (
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Exp (
                                            trans_expression (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Init_list (
                                            trans_initializer_list (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_field_declarator (Run.matcher_token v1),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Bitf_clause (
                                          trans_bitfield_clause (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Init_list (
                                          trans_initializer_list (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `EQ_choice_exp (
                                          (match v with
                                          | Seq [v0; v1] ->
                                              (
                                                Run.trans_token (Run.matcher_token v0),
                                                (match v1 with
                                                | Alt (0, v) ->
                                                    `Exp (
                                                      trans_expression (Run.matcher_token v)
                                                    )
                                                | Alt (1, v) ->
                                                    `Init_list (
                                                      trans_initializer_list (Run.matcher_token v)
                                                    )
                                                | _ -> assert false
                                                )
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v2
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_attribute_specifier (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration_list ((kind, body) : mt) : CST.field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration_list_item ((kind, body) : mt) : CST.field_declaration_list_item =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_field_decl (
            (match v with
            | Alt (0, v) ->
                `Field_decl (
                  trans_field_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prep_def (
                  trans_preproc_def (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Prep_func_def (
                  trans_preproc_function_def (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Prep_call (
                  trans_preproc_call (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Prep_if_in_field_decl_list (
                  trans_preproc_if_in_field_declaration_list (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Prep_ifdef_in_field_decl_list (
                  trans_preproc_ifdef_in_field_declaration_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Temp_decl (
            trans_template_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Inline_meth_defi (
            trans_inline_method_definition (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cons_or_dest_defi (
            trans_constructor_or_destructor_definition (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Cons_or_dest_decl (
            trans_constructor_or_destructor_declaration (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Op_cast_defi (
            trans_operator_cast_definition (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Op_cast_decl (
            trans_operator_cast_declaration (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Friend_decl (
            trans_friend_declaration (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Access_spec_COLON (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_access_specifier (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Alias_decl (
            trans_alias_declaration (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Using_decl (
            trans_using_declaration (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Type_defi (
            trans_type_definition (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Static_assert_decl (
            trans_static_assert_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declarator ((kind, body) : mt) : CST.field_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_attr_field_decl (
            (match v with
            | Alt (0, v) ->
                `Attr_field_decl (
                  trans_attributed_field_declarator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Poin_field_decl (
                  trans_pointer_field_declarator (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Func_field_decl (
                  trans_function_field_declarator (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Array_field_decl (
                  trans_array_field_declarator (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Paren_field_decl (
                  trans_parenthesized_field_declarator (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Choice_id (
                  (match v with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_ellips (
                        trans_semgrep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ref_field_decl (
            trans_reference_field_declarator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Temp_meth (
            trans_template_method (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Op_name (
            trans_operator_name (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_expression ((kind, body) : mt) : CST.field_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `DOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOTSTAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASHGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Choice_id (
                  (match v with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_ellips (
                        trans_semgrep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Dest_name (
                  trans_destructor_name (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Temp_meth (
                  trans_template_method (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Depe_field_id (
                  trans_dependent_field_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_initializer ((kind, body) : mt) : CST.field_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_id (
                  (match v with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_ellips (
                        trans_semgrep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Temp_meth (
                  trans_template_method (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Qual_field_id (
                  trans_qualified_field_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Init_list (
                  trans_initializer_list (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Arg_list (
                  trans_argument_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_initializer_list ((kind, body) : mt) : CST.field_initializer_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_field_initializer (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_initializer (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fold_expression ((kind, body) : mt) : CST.fold_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Un_right_fold (
                  trans_unary_right_fold (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Un_left_fold (
                  trans_unary_left_fold (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Bin_fold (
                  trans_binary_fold (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_range_loop ((kind, body) : mt) : CST.for_range_loop =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_for_range_loop_body (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_attr_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_attr_stmt (
                        (match v with
                        | Alt (0, v) ->
                            `Attr_stmt (
                              trans_attributed_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Labe_stmt (
                              trans_labeled_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Seh_try_stmt (
                              trans_seh_try_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Seh_leave_stmt (
                              trans_seh_leave_statement (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Co_ret_stmt (
                        trans_co_return_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Co_yield_stmt (
                        trans_co_yield_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `For_range_loop (
                        trans_for_range_loop (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Throw_stmt (
                        trans_throw_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_range_loop_body ((kind, body) : mt) : CST.for_range_loop_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_init_statement (Run.matcher_token v))
              v0
            ,
            trans_declaration_specifiers (Run.matcher_token v1),
            trans_declarator (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Init_list (
                  trans_initializer_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_for_statement_body (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_attr_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_attr_stmt (
                        (match v with
                        | Alt (0, v) ->
                            `Attr_stmt (
                              trans_attributed_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Labe_stmt (
                              trans_labeled_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Seh_try_stmt (
                              trans_seh_try_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Seh_leave_stmt (
                              trans_seh_leave_statement (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Co_ret_stmt (
                        trans_co_return_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Co_yield_stmt (
                        trans_co_yield_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `For_range_loop (
                        trans_for_range_loop (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Throw_stmt (
                        trans_throw_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement_body ((kind, body) : mt) : CST.for_statement_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Opt_choice_exp_SEMI (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comma_exp (
                                  trans_comma_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v0
                        ,
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comma_exp (
                      trans_comma_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comma_exp (
                      trans_comma_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_friend_declaration ((kind, body) : mt) : CST.friend_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Opt_choice_class_class_name_SEMI (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.opt
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `Class (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Struct (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Union (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v0
                        ,
                        trans_class_name (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_attributes_end ((kind, body) : mt) : CST.function_attributes_end =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_gnu_asm_expression (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Rep1_attr_spec_rep_attr_decl (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.repeat1
                          (fun v -> trans_attribute_specifier (Run.matcher_token v))
                          v0
                        ,
                        Run.repeat
                          (fun v -> trans_attribute_declaration (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Rep_attr_spec_rep1_attr_decl (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.repeat
                          (fun v -> trans_attribute_specifier (Run.matcher_token v))
                          v0
                        ,
                        Run.repeat1
                          (fun v -> trans_attribute_declaration (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_attributes_start ((kind, body) : mt) : CST.function_attributes_start =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep1_attr_spec_rep_type_qual (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.repeat1
                    (fun v -> trans_attribute_specifier (Run.matcher_token v))
                    v0
                  ,
                  Run.repeat
                    (fun v -> trans_type_qualifier (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Rep_attr_spec_rep1_type_qual (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.repeat
                    (fun v -> trans_attribute_specifier (Run.matcher_token v))
                    v0
                  ,
                  Run.repeat1
                    (fun v -> trans_type_qualifier (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_declarator ((kind, body) : mt) : CST.function_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_declarator (Run.matcher_token v0),
            trans_function_declarator_seq (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_declarator_seq ((kind, body) : mt) : CST.function_declarator_seq =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            trans_parameter_list (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_function_attributes_start (Run.matcher_token v)
              )
              v1
            ,
            Run.opt
              (fun v -> trans_ref_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                trans_function_exception_specification (Run.matcher_token v)
              )
              v3
            ,
            Run.opt
              (fun v ->
                trans_function_attributes_end (Run.matcher_token v)
              )
              v4
            ,
            Run.opt
              (fun v -> trans_trailing_return_type (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v -> trans_function_postfix (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_definition ((kind, body) : mt) : CST.function_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_ms_call_modifier (Run.matcher_token v))
              v0
            ,
            trans_declaration_specifiers (Run.matcher_token v1),
            trans_declarator (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_exception_specification ((kind, body) : mt) : CST.function_exception_specification =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Noex (
            trans_noexcept (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Throw_spec (
            trans_throw_specifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_field_declarator ((kind, body) : mt) : CST.function_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_field_declarator (Run.matcher_token v0),
            trans_function_declarator_seq (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_postfix ((kind, body) : mt) : CST.function_postfix =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep1_virt_spec (
            Run.repeat1
              (fun v -> trans_virtual_specifier (Run.matcher_token v))
              v
          )
      | Alt (1, v) ->
          `Requis_clause (
            trans_requires_clause (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type_declarator ((kind, body) : mt) : CST.function_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_declarator (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_expression ((kind, body) : mt) : CST.generic_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_type_descriptor (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            trans_expression (Run.matcher_token v6),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_descriptor (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2),
                      trans_expression (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v7
            ,
            Run.trans_token (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_gnu_asm_expression ((kind, body) : mt) : CST.gnu_asm_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Asm (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `X___asm__ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v -> trans_gnu_asm_qualifier (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Str_lit (
                  trans_string_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Conc_str (
                  trans_concatenated_string (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_gnu_asm_output_operand_list (Run.matcher_token v0),
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                trans_gnu_asm_input_operand_list (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Seq [v0; v1] ->
                                        (
                                          trans_gnu_asm_clobber_list (Run.matcher_token v0),
                                          Run.opt
                                            (fun v -> trans_gnu_asm_goto_list (Run.matcher_token v))
                                            v1
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_gnu_asm_input_operand ((kind, body) : mt) : CST.gnu_asm_input_operand =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_string_literal (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_gnu_asm_input_operand_list ((kind, body) : mt) : CST.gnu_asm_input_operand_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_gnu_asm_input_operand (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_gnu_asm_input_operand (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_condition_clause (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_attr_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_attr_stmt (
                        (match v with
                        | Alt (0, v) ->
                            `Attr_stmt (
                              trans_attributed_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Labe_stmt (
                              trans_labeled_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Seh_try_stmt (
                              trans_seh_try_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Seh_leave_stmt (
                              trans_seh_leave_statement (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Co_ret_stmt (
                        trans_co_return_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Co_yield_stmt (
                        trans_co_yield_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `For_range_loop (
                        trans_for_range_loop (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Throw_stmt (
                        trans_throw_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_else_clause (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_init_declarator ((kind, body) : mt) : CST.init_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Decl_EQ_choice_init_list (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_declarator (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Init_list (
                        trans_initializer_list (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Decl_choice_arg_list (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_declarator (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Arg_list (
                        trans_argument_list (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Init_list (
                        trans_initializer_list (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_init_statement ((kind, body) : mt) : CST.init_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Alias_decl (
            trans_alias_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Type_defi (
            trans_type_definition (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Decl (
            trans_declaration (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Exp_stmt (
            trans_expression_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_initializer_list ((kind, body) : mt) : CST.initializer_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Init_pair (
                            trans_initializer_pair (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Init_list (
                            trans_initializer_list (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Init_pair (
                                      trans_initializer_pair (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Init_list (
                                      trans_initializer_list (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_initializer_pair ((kind, body) : mt) : CST.initializer_pair =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep1_choice_subs_desi_EQ_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.repeat1
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Subs_desi (
                            trans_subscript_designator (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Field_desi (
                            trans_field_designator (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Subs_range_desi (
                            trans_subscript_range_designator (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Init_list (
                        trans_initializer_list (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_id_COLON_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_ellips (
                        trans_semgrep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Init_list (
                        trans_initializer_list (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inline_method_definition ((kind, body) : mt) : CST.inline_method_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            trans_field_declarator (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_comp_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Comp_stmt (
                        trans_compound_statement (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Defa_meth_clause (
                  trans_default_method_clause (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Delete_meth_clause (
                  trans_delete_method_clause (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labeled_statement ((kind, body) : mt) : CST.labeled_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_attr_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_attr_stmt (
                        (match v with
                        | Alt (0, v) ->
                            `Attr_stmt (
                              trans_attributed_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Labe_stmt (
                              trans_labeled_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Seh_try_stmt (
                              trans_seh_try_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Seh_leave_stmt (
                              trans_seh_leave_statement (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Co_ret_stmt (
                        trans_co_return_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Co_yield_stmt (
                        trans_co_yield_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `For_range_loop (
                        trans_for_range_loop (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Throw_stmt (
                        trans_throw_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda_capture_specifier ((kind, body) : mt) : CST.lambda_capture_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Lambda_defa_capt (
                  trans_lambda_default_capture (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Opt_exp_rep_COMMA_exp (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_expression (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_expression (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | Alt (2, v) ->
                `Lambda_defa_capt_COMMA_exp_rep_COMMA_exp (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        trans_lambda_default_capture (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_expression (Run.matcher_token v2),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_expression (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v3
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda_expression ((kind, body) : mt) : CST.lambda_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_lambda_capture_specifier (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_template_parameter_list (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_requires_clause (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                trans_abstract_function_declarator (Run.matcher_token v)
              )
              v2
            ,
            trans_compound_statement (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_linkage_specification ((kind, body) : mt) : CST.linkage_specification =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_string_literal (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Decl_list (
                  trans_declaration_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ms_based_modifier ((kind, body) : mt) : CST.ms_based_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_namespace_definition ((kind, body) : mt) : CST.namespace_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Id (
                      trans_identifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Nested_name_spec (
                      trans_nested_namespace_specifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_declaration_list (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_new_declarator ((kind, body) : mt) : CST.new_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rectype (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  Run.opt
                    (fun v -> trans_new_declarator (Run.matcher_token v))
                    v3
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_new_expression ((kind, body) : mt) : CST.new_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_argument_list (Run.matcher_token v))
              v2
            ,
            trans_type_specifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_new_declarator (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Arg_list (
                      trans_argument_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Init_list (
                      trans_initializer_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_noexcept ((kind, body) : mt) : CST.noexcept =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_expression (Run.matcher_token v))
                        v1
                      ,
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_offsetof_expression ((kind, body) : mt) : CST.offsetof_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_descriptor (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_ellips (
                  trans_semgrep_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_operator_cast ((kind, body) : mt) : CST.operator_cast =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_declaration_specifiers (Run.matcher_token v1),
            trans_abstract_declarator (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_operator_cast_declaration ((kind, body) : mt) : CST.operator_cast_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v ->
                trans_constructor_specifiers (Run.matcher_token v)
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Op_cast (
                  trans_operator_cast (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Qual_op_cast_id (
                  trans_qualified_operator_cast_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_operator_cast_definition ((kind, body) : mt) : CST.operator_cast_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v ->
                trans_constructor_specifiers (Run.matcher_token v)
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Op_cast (
                  trans_operator_cast (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Qual_op_cast_id (
                  trans_qualified_operator_cast_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_optional_parameter_declaration ((kind, body) : mt) : CST.optional_parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Decl (
                      trans_declarator (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Abst_ref_decl (
                      trans_abstract_reference_declarator (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_optional_type_parameter_declaration ((kind, body) : mt) : CST.optional_type_parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Type (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Class (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_type_specifier (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_declaration ((kind, body) : mt) : CST.parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Decl (
                      trans_declarator (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Abst_decl (
                      trans_abstract_declarator (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_list ((kind, body) : mt) : CST.parameter_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Param_decl (
                            trans_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Opt_param_decl (
                            trans_optional_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Vari_param_decl (
                            trans_variadic_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `DOTDOTDOT (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Param_decl (
                                      trans_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Opt_param_decl (
                                      trans_optional_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Vari_param_decl (
                                      trans_variadic_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `DOTDOTDOT (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_pack_expansion ((kind, body) : mt) : CST.parameter_pack_expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_declarator ((kind, body) : mt) : CST.parenthesized_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_LPAR_choice_exp_RPAR (
            (match v with
            | Alt (0, v) ->
                `LPAR_choice_exp_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Exp (
                              trans_expression (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Comma_exp (
                              trans_comma_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LPAR_assign_exp_lhs_exp_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_assignment_expression_lhs_expression (Run.matcher_token v1)
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `LPAR_semg_typed_meta_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_semgrep_typed_metavar (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_field_declarator ((kind, body) : mt) : CST.parenthesized_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_field_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_type_declarator ((kind, body) : mt) : CST.parenthesized_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_declarator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_placeholder_type_specifier ((kind, body) : mt) : CST.placeholder_type_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_type_specifier (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Auto (
                  trans_auto (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Decl_auto (
                  trans_decltype_auto (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_declarator ((kind, body) : mt) : CST.pointer_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_ms_based_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_ms_pointer_modifier (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v3
            ,
            trans_declarator (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_expression ((kind, body) : mt) : CST.pointer_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_field_declarator ((kind, body) : mt) : CST.pointer_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_ms_based_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_ms_pointer_modifier (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v3
            ,
            trans_field_declarator (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_type_declarator ((kind, body) : mt) : CST.pointer_type_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_ms_based_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_ms_pointer_modifier (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v3
            ,
            trans_type_declarator (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elif ((kind, body) : mt) : CST.preproc_elif =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_bfeb4bb (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_defi (
                      (match v with
                      | Alt (0, v) ->
                          `Func_defi (
                            trans_function_definition (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Link_spec (
                            trans_linkage_specification (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Decl (
                            trans_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_case_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Case_stmt (
                                  trans_case_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_attr_stmt (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_attr_stmt (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Attr_stmt (
                                              trans_attributed_statement (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Labe_stmt (
                                              trans_labeled_statement (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Comp_stmt (
                                              trans_compound_statement (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Exp_stmt (
                                              trans_expression_statement (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `If_stmt (
                                              trans_if_statement (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Switch_stmt (
                                              trans_switch_statement (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `Do_stmt (
                                              trans_do_statement (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `While_stmt (
                                              trans_while_statement (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `For_stmt (
                                              trans_for_statement (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `Ret_stmt (
                                              trans_return_statement (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Brk_stmt (
                                              trans_break_statement (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Cont_stmt (
                                              trans_continue_statement (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `Goto_stmt (
                                              trans_goto_statement (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `Seh_try_stmt (
                                              trans_seh_try_statement (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Seh_leave_stmt (
                                              trans_seh_leave_statement (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Co_ret_stmt (
                                        trans_co_return_statement (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Co_yield_stmt (
                                        trans_co_yield_statement (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `For_range_loop (
                                        trans_for_range_loop (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Try_stmt (
                                        trans_try_statement (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Throw_stmt (
                                        trans_throw_statement (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (4, v) ->
                          `Attr_stmt (
                            trans_attributed_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Type_defi (
                            trans_type_definition (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Empty_decl (
                            trans_empty_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Prep_if (
                            trans_preproc_if (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Prep_ifdef (
                            trans_preproc_ifdef (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Prep_incl (
                            trans_preproc_include (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Prep_def (
                            trans_preproc_def (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Prep_func_def (
                            trans_preproc_function_def (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Prep_call (
                            trans_preproc_call (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Name_defi (
                            trans_namespace_definition (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Conc_defi (
                            trans_concept_definition (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Name_alias_defi (
                            trans_namespace_alias_definition (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Using_decl (
                            trans_using_declaration (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Static_assert_decl (
                            trans_static_assert_declaration (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Temp_decl (
                            trans_template_declaration (Run.matcher_token v)
                          )
                      | Alt (20, v) ->
                          `Temp_inst (
                            trans_template_instantiation (Run.matcher_token v)
                          )
                      | Alt (21, v) ->
                          `Cons_or_dest_defi (
                            trans_constructor_or_destructor_definition (Run.matcher_token v)
                          )
                      | Alt (22, v) ->
                          `Op_cast_defi (
                            trans_operator_cast_definition (Run.matcher_token v)
                          )
                      | Alt (23, v) ->
                          `Op_cast_decl (
                            trans_operator_cast_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Semg_ellips (
                      trans_semgrep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else (
                      trans_preproc_else (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif (
                      trans_preproc_elif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elif_in_enumerator_list ((kind, body) : mt) : CST.preproc_elif_in_enumerator_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_bfeb4bb (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_enumerator (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_enum_list (
                      trans_preproc_else_in_enumerator_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_enum_list (
                      trans_preproc_elif_in_enumerator_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elif_in_enumerator_list_no_comma ((kind, body) : mt) : CST.preproc_elif_in_enumerator_list_no_comma =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_bfeb4bb (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v -> trans_enumerator (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_enum_list_no_comma (
                      trans_preproc_else_in_enumerator_list_no_comma (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_enum_list_no_comma (
                      trans_preproc_elif_in_enumerator_list_no_comma (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elif_in_field_declaration_list ((kind, body) : mt) : CST.preproc_elif_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_bfeb4bb (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_field_decl_list (
                      trans_preproc_else_in_field_declaration_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_field_decl_list (
                      trans_preproc_elif_in_field_declaration_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elifdef ((kind, body) : mt) : CST.preproc_elifdef =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_0307ca2 (
                  trans_pat_0307ca2 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_a6d4183 (
                  trans_pat_a6d4183 (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_defi (
                      (match v with
                      | Alt (0, v) ->
                          `Func_defi (
                            trans_function_definition (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Link_spec (
                            trans_linkage_specification (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Decl (
                            trans_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_case_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Case_stmt (
                                  trans_case_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_attr_stmt (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_attr_stmt (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Attr_stmt (
                                              trans_attributed_statement (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Labe_stmt (
                                              trans_labeled_statement (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Comp_stmt (
                                              trans_compound_statement (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Exp_stmt (
                                              trans_expression_statement (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `If_stmt (
                                              trans_if_statement (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Switch_stmt (
                                              trans_switch_statement (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `Do_stmt (
                                              trans_do_statement (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `While_stmt (
                                              trans_while_statement (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `For_stmt (
                                              trans_for_statement (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `Ret_stmt (
                                              trans_return_statement (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Brk_stmt (
                                              trans_break_statement (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Cont_stmt (
                                              trans_continue_statement (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `Goto_stmt (
                                              trans_goto_statement (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `Seh_try_stmt (
                                              trans_seh_try_statement (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Seh_leave_stmt (
                                              trans_seh_leave_statement (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Co_ret_stmt (
                                        trans_co_return_statement (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Co_yield_stmt (
                                        trans_co_yield_statement (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `For_range_loop (
                                        trans_for_range_loop (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Try_stmt (
                                        trans_try_statement (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Throw_stmt (
                                        trans_throw_statement (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (4, v) ->
                          `Attr_stmt (
                            trans_attributed_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Type_defi (
                            trans_type_definition (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Empty_decl (
                            trans_empty_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Prep_if (
                            trans_preproc_if (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Prep_ifdef (
                            trans_preproc_ifdef (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Prep_incl (
                            trans_preproc_include (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Prep_def (
                            trans_preproc_def (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Prep_func_def (
                            trans_preproc_function_def (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Prep_call (
                            trans_preproc_call (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Name_defi (
                            trans_namespace_definition (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Conc_defi (
                            trans_concept_definition (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Name_alias_defi (
                            trans_namespace_alias_definition (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Using_decl (
                            trans_using_declaration (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Static_assert_decl (
                            trans_static_assert_declaration (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Temp_decl (
                            trans_template_declaration (Run.matcher_token v)
                          )
                      | Alt (20, v) ->
                          `Temp_inst (
                            trans_template_instantiation (Run.matcher_token v)
                          )
                      | Alt (21, v) ->
                          `Cons_or_dest_defi (
                            trans_constructor_or_destructor_definition (Run.matcher_token v)
                          )
                      | Alt (22, v) ->
                          `Op_cast_defi (
                            trans_operator_cast_definition (Run.matcher_token v)
                          )
                      | Alt (23, v) ->
                          `Op_cast_decl (
                            trans_operator_cast_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Semg_ellips (
                      trans_semgrep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else (
                      trans_preproc_else (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif (
                      trans_preproc_elif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elifdef_in_enumerator_list ((kind, body) : mt) : CST.preproc_elifdef_in_enumerator_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_0307ca2 (
                  trans_pat_0307ca2 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_a6d4183 (
                  trans_pat_a6d4183 (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_enumerator (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_enum_list (
                      trans_preproc_else_in_enumerator_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_enum_list (
                      trans_preproc_elif_in_enumerator_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elifdef_in_enumerator_list_no_comma ((kind, body) : mt) : CST.preproc_elifdef_in_enumerator_list_no_comma =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_0307ca2 (
                  trans_pat_0307ca2 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_a6d4183 (
                  trans_pat_a6d4183 (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_enumerator (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_enum_list_no_comma (
                      trans_preproc_else_in_enumerator_list_no_comma (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_enum_list_no_comma (
                      trans_preproc_elif_in_enumerator_list_no_comma (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_elifdef_in_field_declaration_list ((kind, body) : mt) : CST.preproc_elifdef_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_0307ca2 (
                  trans_pat_0307ca2 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_a6d4183 (
                  trans_pat_a6d4183 (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_field_decl_list (
                      trans_preproc_else_in_field_declaration_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_field_decl_list (
                      trans_preproc_elif_in_field_declaration_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_else ((kind, body) : mt) : CST.preproc_else =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_56631e5 (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_defi (
                      (match v with
                      | Alt (0, v) ->
                          `Func_defi (
                            trans_function_definition (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Link_spec (
                            trans_linkage_specification (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Decl (
                            trans_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_case_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Case_stmt (
                                  trans_case_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_attr_stmt (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_attr_stmt (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Attr_stmt (
                                              trans_attributed_statement (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Labe_stmt (
                                              trans_labeled_statement (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Comp_stmt (
                                              trans_compound_statement (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Exp_stmt (
                                              trans_expression_statement (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `If_stmt (
                                              trans_if_statement (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Switch_stmt (
                                              trans_switch_statement (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `Do_stmt (
                                              trans_do_statement (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `While_stmt (
                                              trans_while_statement (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `For_stmt (
                                              trans_for_statement (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `Ret_stmt (
                                              trans_return_statement (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Brk_stmt (
                                              trans_break_statement (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Cont_stmt (
                                              trans_continue_statement (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `Goto_stmt (
                                              trans_goto_statement (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `Seh_try_stmt (
                                              trans_seh_try_statement (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Seh_leave_stmt (
                                              trans_seh_leave_statement (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Co_ret_stmt (
                                        trans_co_return_statement (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Co_yield_stmt (
                                        trans_co_yield_statement (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `For_range_loop (
                                        trans_for_range_loop (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Try_stmt (
                                        trans_try_statement (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Throw_stmt (
                                        trans_throw_statement (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (4, v) ->
                          `Attr_stmt (
                            trans_attributed_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Type_defi (
                            trans_type_definition (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Empty_decl (
                            trans_empty_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Prep_if (
                            trans_preproc_if (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Prep_ifdef (
                            trans_preproc_ifdef (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Prep_incl (
                            trans_preproc_include (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Prep_def (
                            trans_preproc_def (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Prep_func_def (
                            trans_preproc_function_def (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Prep_call (
                            trans_preproc_call (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Name_defi (
                            trans_namespace_definition (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Conc_defi (
                            trans_concept_definition (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Name_alias_defi (
                            trans_namespace_alias_definition (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Using_decl (
                            trans_using_declaration (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Static_assert_decl (
                            trans_static_assert_declaration (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Temp_decl (
                            trans_template_declaration (Run.matcher_token v)
                          )
                      | Alt (20, v) ->
                          `Temp_inst (
                            trans_template_instantiation (Run.matcher_token v)
                          )
                      | Alt (21, v) ->
                          `Cons_or_dest_defi (
                            trans_constructor_or_destructor_definition (Run.matcher_token v)
                          )
                      | Alt (22, v) ->
                          `Op_cast_defi (
                            trans_operator_cast_definition (Run.matcher_token v)
                          )
                      | Alt (23, v) ->
                          `Op_cast_decl (
                            trans_operator_cast_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Semg_ellips (
                      trans_semgrep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_else_in_enumerator_list ((kind, body) : mt) : CST.preproc_else_in_enumerator_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_56631e5 (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_enumerator (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_else_in_enumerator_list_no_comma ((kind, body) : mt) : CST.preproc_else_in_enumerator_list_no_comma =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_56631e5 (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_enumerator (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_else_in_field_declaration_list ((kind, body) : mt) : CST.preproc_else_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_56631e5 (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_if ((kind, body) : mt) : CST.preproc_if =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_pat_3df6e71 (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_defi (
                      (match v with
                      | Alt (0, v) ->
                          `Func_defi (
                            trans_function_definition (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Link_spec (
                            trans_linkage_specification (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Decl (
                            trans_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_case_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Case_stmt (
                                  trans_case_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_attr_stmt (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_attr_stmt (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Attr_stmt (
                                              trans_attributed_statement (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Labe_stmt (
                                              trans_labeled_statement (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Comp_stmt (
                                              trans_compound_statement (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Exp_stmt (
                                              trans_expression_statement (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `If_stmt (
                                              trans_if_statement (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Switch_stmt (
                                              trans_switch_statement (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `Do_stmt (
                                              trans_do_statement (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `While_stmt (
                                              trans_while_statement (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `For_stmt (
                                              trans_for_statement (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `Ret_stmt (
                                              trans_return_statement (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Brk_stmt (
                                              trans_break_statement (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Cont_stmt (
                                              trans_continue_statement (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `Goto_stmt (
                                              trans_goto_statement (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `Seh_try_stmt (
                                              trans_seh_try_statement (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Seh_leave_stmt (
                                              trans_seh_leave_statement (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Co_ret_stmt (
                                        trans_co_return_statement (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Co_yield_stmt (
                                        trans_co_yield_statement (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `For_range_loop (
                                        trans_for_range_loop (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Try_stmt (
                                        trans_try_statement (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Throw_stmt (
                                        trans_throw_statement (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (4, v) ->
                          `Attr_stmt (
                            trans_attributed_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Type_defi (
                            trans_type_definition (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Empty_decl (
                            trans_empty_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Prep_if (
                            trans_preproc_if (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Prep_ifdef (
                            trans_preproc_ifdef (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Prep_incl (
                            trans_preproc_include (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Prep_def (
                            trans_preproc_def (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Prep_func_def (
                            trans_preproc_function_def (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Prep_call (
                            trans_preproc_call (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Name_defi (
                            trans_namespace_definition (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Conc_defi (
                            trans_concept_definition (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Name_alias_defi (
                            trans_namespace_alias_definition (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Using_decl (
                            trans_using_declaration (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Static_assert_decl (
                            trans_static_assert_declaration (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Temp_decl (
                            trans_template_declaration (Run.matcher_token v)
                          )
                      | Alt (20, v) ->
                          `Temp_inst (
                            trans_template_instantiation (Run.matcher_token v)
                          )
                      | Alt (21, v) ->
                          `Cons_or_dest_defi (
                            trans_constructor_or_destructor_definition (Run.matcher_token v)
                          )
                      | Alt (22, v) ->
                          `Op_cast_defi (
                            trans_operator_cast_definition (Run.matcher_token v)
                          )
                      | Alt (23, v) ->
                          `Op_cast_decl (
                            trans_operator_cast_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Semg_ellips (
                      trans_semgrep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else (
                      trans_preproc_else (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif (
                      trans_preproc_elif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            trans_pat_c46d1b2 (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_if_in_enumerator_list ((kind, body) : mt) : CST.preproc_if_in_enumerator_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_pat_3df6e71 (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_enumerator (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_enum_list (
                      trans_preproc_else_in_enumerator_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_enum_list (
                      trans_preproc_elif_in_enumerator_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            trans_pat_c46d1b2 (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_if_in_enumerator_list_no_comma ((kind, body) : mt) : CST.preproc_if_in_enumerator_list_no_comma =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_pat_3df6e71 (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v -> trans_enumerator (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_enum_list_no_comma (
                      trans_preproc_else_in_enumerator_list_no_comma (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_enum_list_no_comma (
                      trans_preproc_elif_in_enumerator_list_no_comma (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            trans_pat_c46d1b2 (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_if_in_field_declaration_list ((kind, body) : mt) : CST.preproc_if_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_pat_3df6e71 (Run.matcher_token v0),
            trans_preproc_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Prep_else_in_field_decl_list (
                      trans_preproc_else_in_field_declaration_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_field_decl_list (
                      trans_preproc_elif_in_field_declaration_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            trans_pat_c46d1b2 (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_ifdef ((kind, body) : mt) : CST.preproc_ifdef =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_25b90ba (
                  trans_pat_25b90ba (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_9d92f6a (
                  trans_pat_9d92f6a (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_defi (
                      (match v with
                      | Alt (0, v) ->
                          `Func_defi (
                            trans_function_definition (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Link_spec (
                            trans_linkage_specification (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Decl (
                            trans_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_case_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Case_stmt (
                                  trans_case_statement (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_choice_attr_stmt (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Choice_attr_stmt (
                                        (match v with
                                        | Alt (0, v) ->
                                            `Attr_stmt (
                                              trans_attributed_statement (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Labe_stmt (
                                              trans_labeled_statement (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `Comp_stmt (
                                              trans_compound_statement (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Exp_stmt (
                                              trans_expression_statement (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `If_stmt (
                                              trans_if_statement (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Switch_stmt (
                                              trans_switch_statement (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `Do_stmt (
                                              trans_do_statement (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `While_stmt (
                                              trans_while_statement (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `For_stmt (
                                              trans_for_statement (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `Ret_stmt (
                                              trans_return_statement (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Brk_stmt (
                                              trans_break_statement (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Cont_stmt (
                                              trans_continue_statement (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `Goto_stmt (
                                              trans_goto_statement (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `Seh_try_stmt (
                                              trans_seh_try_statement (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Seh_leave_stmt (
                                              trans_seh_leave_statement (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (1, v) ->
                                      `Co_ret_stmt (
                                        trans_co_return_statement (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Co_yield_stmt (
                                        trans_co_yield_statement (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `For_range_loop (
                                        trans_for_range_loop (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Try_stmt (
                                        trans_try_statement (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Throw_stmt (
                                        trans_throw_statement (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (4, v) ->
                          `Attr_stmt (
                            trans_attributed_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Type_defi (
                            trans_type_definition (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Empty_decl (
                            trans_empty_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Prep_if (
                            trans_preproc_if (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Prep_ifdef (
                            trans_preproc_ifdef (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Prep_incl (
                            trans_preproc_include (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Prep_def (
                            trans_preproc_def (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Prep_func_def (
                            trans_preproc_function_def (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Prep_call (
                            trans_preproc_call (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Name_defi (
                            trans_namespace_definition (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Conc_defi (
                            trans_concept_definition (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Name_alias_defi (
                            trans_namespace_alias_definition (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Using_decl (
                            trans_using_declaration (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Static_assert_decl (
                            trans_static_assert_declaration (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Temp_decl (
                            trans_template_declaration (Run.matcher_token v)
                          )
                      | Alt (20, v) ->
                          `Temp_inst (
                            trans_template_instantiation (Run.matcher_token v)
                          )
                      | Alt (21, v) ->
                          `Cons_or_dest_defi (
                            trans_constructor_or_destructor_definition (Run.matcher_token v)
                          )
                      | Alt (22, v) ->
                          `Op_cast_defi (
                            trans_operator_cast_definition (Run.matcher_token v)
                          )
                      | Alt (23, v) ->
                          `Op_cast_decl (
                            trans_operator_cast_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Semg_ellips (
                      trans_semgrep_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_prep_else (
                      (match v with
                      | Alt (0, v) ->
                          `Prep_else (
                            trans_preproc_else (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Prep_elif (
                            trans_preproc_elif (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Prep_elif (
                      trans_preproc_elifdef (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_pat_c46d1b2 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_ifdef_in_enumerator_list ((kind, body) : mt) : CST.preproc_ifdef_in_enumerator_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_25b90ba (
                  trans_pat_25b90ba (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_9d92f6a (
                  trans_pat_9d92f6a (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_enumerator (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_prep_else_in_enum_list (
                      (match v with
                      | Alt (0, v) ->
                          `Prep_else_in_enum_list (
                            trans_preproc_else_in_enumerator_list (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Prep_elif_in_enum_list (
                            trans_preproc_elif_in_enumerator_list (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_enum_list (
                      trans_preproc_elifdef_in_enumerator_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_pat_c46d1b2 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_ifdef_in_enumerator_list_no_comma ((kind, body) : mt) : CST.preproc_ifdef_in_enumerator_list_no_comma =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_25b90ba (
                  trans_pat_25b90ba (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_9d92f6a (
                  trans_pat_9d92f6a (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_enumerator (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_prep_else_in_enum_list_no_comma (
                      (match v with
                      | Alt (0, v) ->
                          `Prep_else_in_enum_list_no_comma (
                            trans_preproc_else_in_enumerator_list_no_comma (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Prep_elif_in_enum_list_no_comma (
                            trans_preproc_elif_in_enumerator_list_no_comma (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_enum_list_no_comma (
                      trans_preproc_elifdef_in_enumerator_list_no_comma (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_pat_c46d1b2 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_preproc_ifdef_in_field_declaration_list ((kind, body) : mt) : CST.preproc_ifdef_in_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_25b90ba (
                  trans_pat_25b90ba (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_9d92f6a (
                  trans_pat_9d92f6a (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                trans_field_declaration_list_item (Run.matcher_token v)
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_prep_else_in_field_decl_list (
                      (match v with
                      | Alt (0, v) ->
                          `Prep_else_in_field_decl_list (
                            trans_preproc_else_in_field_declaration_list (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Prep_elif_in_field_decl_list (
                            trans_preproc_elif_in_field_declaration_list (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Prep_elif_in_field_decl_list (
                      trans_preproc_elifdef_in_field_declaration_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_pat_c46d1b2 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_qualified_field_identifier ((kind, body) : mt) : CST.qualified_field_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_scope_resolution (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Depe_field_id (
                  trans_dependent_field_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Qual_field_id (
                  trans_qualified_field_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Temp_meth (
                  trans_template_method (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Choice_id (
                  (match v with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_ellips (
                        trans_semgrep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_qualified_identifier ((kind, body) : mt) : CST.qualified_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_scope_resolution (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Depe_id (
                  trans_dependent_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Temp_func (
                  trans_template_function (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Opt_temp_id (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v0
                        ,
                        trans_identifier (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (4, v) ->
                `Op_name (
                  trans_operator_name (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Dest_name (
                  trans_destructor_name (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Poin_type_decl (
                  trans_pointer_type_declarator (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_qualified_operator_cast_identifier ((kind, body) : mt) : CST.qualified_operator_cast_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_scope_resolution (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Qual_op_cast_id (
                  trans_qualified_operator_cast_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Op_cast (
                  trans_operator_cast (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_qualified_type_identifier ((kind, body) : mt) : CST.qualified_type_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_scope_resolution (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Depe_type_id (
                  trans_dependent_type_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Qual_type_id (
                  trans_qualified_type_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Temp_type (
                  trans_template_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_reference_declarator ((kind, body) : mt) : CST.reference_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `AMPAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_declarator (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_reference_field_declarator ((kind, body) : mt) : CST.reference_field_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `AMPAMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_field_declarator (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_requirement ((kind, body) : mt) : CST.requirement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_stmt (
            trans_expression_statement (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Type_requ (
            trans_type_requirement (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Comp_requ (
            trans_compound_requirement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_requirement_clause_constraint ((kind, body) : mt) : CST.requirement_clause_constraint =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `True (
            trans_true_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `False (
            trans_false_ (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Class_name (
            trans_class_name (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Fold_exp (
            trans_fold_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Lambda_exp (
            trans_lambda_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Requis_exp (
            trans_requires_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `LPAR_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Cons_conj (
            trans_constraint_conjunction (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Cons_disj (
            trans_constraint_disjunction (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_requirement_seq ((kind, body) : mt) : CST.requirement_seq =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_requirement (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_requires_clause ((kind, body) : mt) : CST.requires_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_requirement_clause_constraint (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_requires_expression ((kind, body) : mt) : CST.requires_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_requires_parameter_list (Run.matcher_token v)
              )
              v1
            ,
            trans_requirement_seq (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_requires_parameter_list ((kind, body) : mt) : CST.requires_parameter_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Param_decl (
                            trans_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Opt_param_decl (
                            trans_optional_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Vari_param_decl (
                            trans_variadic_parameter_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Param_decl (
                                      trans_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Opt_param_decl (
                                      trans_optional_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Vari_param_decl (
                                      trans_variadic_parameter_declaration (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Ret_opt_choice_exp_SEMI (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `Exp (
                                  trans_expression (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Comma_exp (
                                  trans_comma_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Ret_init_list_SEMI (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_initializer_list (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scope_resolution ((kind, body) : mt) : CST.scope_resolution =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Id (
                      trans_identifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Temp_type (
                      trans_template_type (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Decl (
                      trans_decltype (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Depe_type_id (
                      trans_dependent_type_identifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_seh_except_clause ((kind, body) : mt) : CST.seh_except_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_compound_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_seh_finally_clause ((kind, body) : mt) : CST.seh_finally_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_seh_try_statement ((kind, body) : mt) : CST.seh_try_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Seh_except_clause (
                  trans_seh_except_clause (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seh_fina_clause (
                  trans_seh_finally_clause (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_semgrep_typed_metavar ((kind, body) : mt) : CST.semgrep_typed_metavar =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_descriptor (Run.matcher_token v0),
            trans_semgrep_metavar (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sizeof_expression ((kind, body) : mt) : CST.sizeof_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Sizeof_choice_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `LPAR_type_desc_RPAR (
                        (match v with
                        | Seq [v0; v1; v2] ->
                            (
                              Run.trans_token (Run.matcher_token v0),
                              trans_type_descriptor (Run.matcher_token v1),
                              Run.trans_token (Run.matcher_token v2)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Sizeof_DOTDOTDOT_LPAR_id_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  trans_identifier (Run.matcher_token v3),
                  Run.trans_token (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_static_assert_declaration ((kind, body) : mt) : CST.static_assert_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Str_lit (
                            trans_string_literal (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Raw_str_lit (
                            trans_raw_string_literal (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Conc_str (
                            trans_concatenated_string (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_specifier ((kind, body) : mt) : CST.struct_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_class_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_argument_list ((kind, body) : mt) : CST.subscript_argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Init_list (
                            trans_initializer_list (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Init_list (
                                      trans_initializer_list (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_designator ((kind, body) : mt) : CST.subscript_designator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_expression ((kind, body) : mt) : CST.subscript_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_subscript_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_range_designator ((kind, body) : mt) : CST.subscript_range_designator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_statement ((kind, body) : mt) : CST.switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_condition_clause (Run.matcher_token v1),
            trans_compound_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_argument_list ((kind, body) : mt) : CST.template_argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Type_desc (
                            trans_type_descriptor (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_param_pack_expa (
                            trans_type_parameter_pack_expansion (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Type_desc (
                                      trans_type_descriptor (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Type_param_pack_expa (
                                      trans_type_parameter_pack_expansion (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_tok_prec_p1_gt (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_declaration ((kind, body) : mt) : CST.template_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_template_parameter_list (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_requires_clause (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Empty_decl (
                  trans_empty_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Alias_decl (
                  trans_alias_declaration (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Temp_decl (
                  trans_template_declaration (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Func_defi (
                  trans_function_definition (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Conc_defi (
                  trans_concept_definition (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Friend_decl (
                  trans_friend_declaration (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Cons_or_dest_decl (
                  trans_constructor_or_destructor_declaration (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Cons_or_dest_defi (
                  trans_constructor_or_destructor_definition (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Op_cast_decl (
                  trans_operator_cast_declaration (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Op_cast_defi (
                  trans_operator_cast_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_function ((kind, body) : mt) : CST.template_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_template_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_instantiation ((kind, body) : mt) : CST.template_instantiation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_declaration_specifiers (Run.matcher_token v)
              )
              v1
            ,
            trans_declarator (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_method ((kind, body) : mt) : CST.template_method =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_id (
                  (match v with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Semg_ellips (
                        trans_semgrep_ellipsis (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Op_name (
                  trans_operator_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_template_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_parameter_list ((kind, body) : mt) : CST.template_parameter_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Param_decl (
                            trans_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Opt_param_decl (
                            trans_optional_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Type_param_decl (
                            trans_type_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Vari_param_decl (
                            trans_variadic_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Vari_type_param_decl (
                            trans_variadic_type_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Opt_type_param_decl (
                            trans_optional_type_parameter_declaration (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Temp_temp_param_decl (
                            trans_template_template_parameter_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Param_decl (
                                      trans_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Opt_param_decl (
                                      trans_optional_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Type_param_decl (
                                      trans_type_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `Vari_param_decl (
                                      trans_variadic_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (4, v) ->
                                    `Vari_type_param_decl (
                                      trans_variadic_type_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (5, v) ->
                                    `Opt_type_param_decl (
                                      trans_optional_type_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (6, v) ->
                                    `Temp_temp_param_decl (
                                      trans_template_template_parameter_declaration (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_tok_prec_p1_gt (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_template_parameter_declaration ((kind, body) : mt) : CST.template_template_parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_template_parameter_list (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Type_param_decl (
                  trans_type_parameter_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Vari_type_param_decl (
                  trans_variadic_type_parameter_declaration (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Opt_type_param_decl (
                  trans_optional_type_parameter_declaration (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_type ((kind, body) : mt) : CST.template_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_template_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_throw_specifier ((kind, body) : mt) : CST.throw_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_type_descriptor (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_type_descriptor (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_throw_statement ((kind, body) : mt) : CST.throw_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_trailing_return_type ((kind, body) : mt) : CST.trailing_return_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_descriptor (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_statement ((kind, body) : mt) : CST.try_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1),
            Run.repeat1
              (fun v -> trans_catch_clause (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_declarator ((kind, body) : mt) : CST.type_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Attr_type_decl (
            trans_attributed_type_declarator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Poin_type_decl (
            trans_pointer_type_declarator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Func_type_decl (
            trans_function_type_declarator (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Array_type_decl (
            trans_array_type_declarator (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Paren_type_decl (
            trans_parenthesized_type_declarator (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Choice_signed (
            (match v with
            | Alt (0, v) ->
                `Signed (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unsi (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Long (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Short (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Prim_type (
            trans_primitive_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_definition ((kind, body) : mt) : CST.type_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_definition_type (Run.matcher_token v2),
            trans_type_definition_declarators (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_attribute_specifier (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_definition_declarators ((kind, body) : mt) : CST.type_definition_declarators =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_declarator (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_definition_type ((kind, body) : mt) : CST.type_definition_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v0
            ,
            trans_type_specifier (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_descriptor ((kind, body) : mt) : CST.type_descriptor =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v0
            ,
            trans_type_specifier (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_type_qualifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_abstract_declarator (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter_pack_expansion ((kind, body) : mt) : CST.type_parameter_pack_expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_descriptor (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_requirement ((kind, body) : mt) : CST.type_requirement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_class_name (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_specifier ((kind, body) : mt) : CST.type_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Struct_spec (
            trans_struct_specifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Union_spec (
            trans_union_specifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Enum_spec (
            trans_enum_specifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Class_spec (
            trans_class_specifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Sized_type_spec (
            trans_sized_type_specifier (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Prim_type (
            trans_primitive_type (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Temp_type (
            trans_template_type (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Depe_type (
            trans_dependent_type (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Plac_type_spec (
            trans_placeholder_type_specifier (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Decl (
            trans_decltype (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Choice_qual_type_id (
            (match v with
            | Alt (0, v) ->
                `Qual_type_id (
                  trans_qualified_type_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_BANG_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `BANG (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `TILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_not_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Not (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Compl (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_left_fold ((kind, body) : mt) : CST.unary_left_fold =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_fold_operator (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_right_fold ((kind, body) : mt) : CST.unary_right_fold =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_fold_operator (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_union_specifier ((kind, body) : mt) : CST.union_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_class_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_update_expression ((kind, body) : mt) : CST.update_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_DASHDASH_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_choice_DASHDASH (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_using_declaration ((kind, body) : mt) : CST.using_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Name (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Enum (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variadic_parameter_declaration ((kind, body) : mt) : CST.variadic_parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_declaration_specifiers (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Vari_decl (
                  trans_variadic_declarator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Vari_ref_decl (
                  trans_variadic_reference_declarator (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_condition_clause (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Case_stmt (
                  trans_case_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_attr_stmt (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_attr_stmt (
                        (match v with
                        | Alt (0, v) ->
                            `Attr_stmt (
                              trans_attributed_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Labe_stmt (
                              trans_labeled_statement (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Exp_stmt (
                              trans_expression_statement (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `If_stmt (
                              trans_if_statement (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Switch_stmt (
                              trans_switch_statement (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Do_stmt (
                              trans_do_statement (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `While_stmt (
                              trans_while_statement (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `For_stmt (
                              trans_for_statement (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Ret_stmt (
                              trans_return_statement (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Brk_stmt (
                              trans_break_statement (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Cont_stmt (
                              trans_continue_statement (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Goto_stmt (
                              trans_goto_statement (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Seh_try_stmt (
                              trans_seh_try_statement (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Seh_leave_stmt (
                              trans_seh_leave_statement (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Co_ret_stmt (
                        trans_co_return_statement (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Co_yield_stmt (
                        trans_co_yield_statement (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `For_range_loop (
                        trans_for_range_loop (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Try_stmt (
                        trans_try_statement (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Throw_stmt (
                        trans_throw_statement (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_semgrep_expression ((kind, body) : mt) : CST.semgrep_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false




let trans_top_level_expression_statement ((kind, body) : mt) : CST.top_level_expression_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression_not_binary (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false





let trans_translation_unit ((kind, body) : mt) : CST.translation_unit =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep_choice_func_defi (
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Func_defi (
                      trans_function_definition (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Link_spec (
                      trans_linkage_specification (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Choice_choice_choice_case_stmt (
                      (match v with
                      | Alt (0, v) ->
                          `Choice_choice_case_stmt (
                            (match v with
                            | Alt (0, v) ->
                                `Choice_case_stmt (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Case_stmt (
                                        trans_case_statement (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Attr_stmt (
                                        trans_attributed_statement (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Labe_stmt (
                                        trans_labeled_statement (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Comp_stmt (
                                        trans_compound_statement (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Top_level_exp_stmt (
                                        trans_top_level_expression_statement (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `If_stmt (
                                        trans_if_statement (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Switch_stmt (
                                        trans_switch_statement (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `Do_stmt (
                                        trans_do_statement (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `While_stmt (
                                        trans_while_statement (Run.matcher_token v)
                                      )
                                  | Alt (9, v) ->
                                      `For_stmt (
                                        trans_for_statement (Run.matcher_token v)
                                      )
                                  | Alt (10, v) ->
                                      `Ret_stmt (
                                        trans_return_statement (Run.matcher_token v)
                                      )
                                  | Alt (11, v) ->
                                      `Brk_stmt (
                                        trans_break_statement (Run.matcher_token v)
                                      )
                                  | Alt (12, v) ->
                                      `Cont_stmt (
                                        trans_continue_statement (Run.matcher_token v)
                                      )
                                  | Alt (13, v) ->
                                      `Goto_stmt (
                                        trans_goto_statement (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Co_ret_stmt (
                                  trans_co_return_statement (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Co_yield_stmt (
                                  trans_co_yield_statement (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `For_range_loop (
                                  trans_for_range_loop (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Try_stmt (
                                  trans_try_statement (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Throw_stmt (
                                  trans_throw_statement (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Semg_ellips (
                            trans_semgrep_ellipsis (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (4, v) ->
                    `Attr_stmt (
                      trans_attributed_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Type_defi (
                      trans_type_definition (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Empty_decl (
                      trans_empty_declaration (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Prep_if (
                      trans_preproc_if (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Prep_ifdef (
                      trans_preproc_ifdef (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Prep_incl (
                      trans_preproc_include (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Prep_def (
                      trans_preproc_def (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Prep_func_def (
                      trans_preproc_function_def (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Prep_call (
                      trans_preproc_call (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Name_defi (
                      trans_namespace_definition (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Conc_defi (
                      trans_concept_definition (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Name_alias_defi (
                      trans_namespace_alias_definition (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Using_decl (
                      trans_using_declaration (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Alias_decl (
                      trans_alias_declaration (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Static_assert_decl (
                      trans_static_assert_declaration (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Temp_decl (
                      trans_template_declaration (Run.matcher_token v)
                    )
                | Alt (20, v) ->
                    `Temp_inst (
                      trans_template_instantiation (Run.matcher_token v)
                    )
                | Alt (21, v) ->
                    `Cons_or_dest_defi (
                      trans_constructor_or_destructor_definition (Run.matcher_token v)
                    )
                | Alt (22, v) ->
                    `Op_cast_defi (
                      trans_operator_cast_definition (Run.matcher_token v)
                    )
                | Alt (23, v) ->
                    `Op_cast_decl (
                      trans_operator_cast_declaration (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v
          )
      | Alt (1, v) ->
          `Semg_exp (
            trans_semgrep_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_translation_unit

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

